{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Pipe, NgModule } from '@angular/core';\nlet DiffPipe = /*#__PURE__*/(() => {\n  class DiffPipe {\n    transform(input, ...args) {\n      if (!Array.isArray(input)) {\n        return input;\n      }\n      // tslint:disable-next-line no-bitwise\n      return args.reduce((d, c) => d.filter(e => !~c.indexOf(e)), input);\n    }\n  }\n  DiffPipe.ɵfac = function DiffPipe_Factory(t) {\n    return new (t || DiffPipe)();\n  };\n  DiffPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"diff\",\n    type: DiffPipe,\n    pure: true\n  });\n  return DiffPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet InitialPipe = /*#__PURE__*/(() => {\n  class InitialPipe {\n    transform(input, num = 0) {\n      return Array.isArray(input) ? input.slice(0, input.length - num) : input;\n    }\n  }\n  InitialPipe.ɵfac = function InitialPipe_Factory(t) {\n    return new (t || InitialPipe)();\n  };\n  InitialPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"initial\",\n    type: InitialPipe,\n    pure: true\n  });\n  return InitialPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet FlattenPipe = /*#__PURE__*/(() => {\n  class FlattenPipe {\n    transform(input, shallow = false) {\n      if (!Array.isArray(input)) {\n        return input;\n      }\n      return shallow ? [].concat.apply([], input) : this.flatten(input);\n    }\n    flatten(array) {\n      return array.reduce((arr, elm) => {\n        if (Array.isArray(elm)) {\n          return arr.concat(this.flatten(elm));\n        }\n        return arr.concat(elm);\n      }, []);\n    }\n  }\n  FlattenPipe.ɵfac = function FlattenPipe_Factory(t) {\n    return new (t || FlattenPipe)();\n  };\n  FlattenPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"flatten\",\n    type: FlattenPipe,\n    pure: true\n  });\n  return FlattenPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet IntersectionPipe = /*#__PURE__*/(() => {\n  class IntersectionPipe {\n    transform(input, ...args) {\n      if (!Array.isArray(input)) {\n        return input;\n      }\n      // tslint:disable-next-line no-bitwise\n      return args.reduce((n, c) => n.filter(e => !!~c.indexOf(e)), input);\n    }\n  }\n  IntersectionPipe.ɵfac = function IntersectionPipe_Factory(t) {\n    return new (t || IntersectionPipe)();\n  };\n  IntersectionPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"intersection\",\n    type: IntersectionPipe,\n    pure: true\n  });\n  return IntersectionPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction isUndefined(value) {\n  return typeof value === 'undefined';\n}\nfunction isNull(value) {\n  return value === null;\n}\nfunction isFunction(value) {\n  return typeof value === 'function';\n}\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\nfunction isString(value) {\n  return typeof value === 'string';\n}\nfunction isBoolean(value) {\n  return typeof value === 'boolean';\n}\nfunction isObject(value) {\n  return value !== null && typeof value === 'object';\n}\nfunction isNumberFinite(value) {\n  return isNumber(value) && isFinite(value);\n}\nfunction isVowel(letter) {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  return vowels.indexOf(letter) !== -1;\n}\nfunction ucFirst(text) {\n  const [part, ...split] = text.split(/\\s/g);\n  const ucd = part.toLowerCase().split(/(?=['|-])/g).map(word => word.indexOf('-') + word.indexOf(\"'\") > -2 ? word.slice(0, 2).toUpperCase() + word.slice(2) : word.slice(0, 1).toUpperCase() + word.slice(1)).join('');\n  return [ucd, ...split].join(' ');\n}\nfunction applyPrecision(num, precision) {\n  if (precision <= 0) {\n    return Math.round(num);\n  }\n  const tho = 10 ** precision;\n  return Math.round(num * tho) / tho;\n}\nfunction extractDeepPropertyByMapKey(obj, map) {\n  const keys = map.split('.');\n  const head = keys.shift();\n  return keys.reduce((prop, key) => {\n    return !isUndefined(prop) && !isNull(prop) && !isUndefined(prop[key]) ? prop[key] : undefined;\n  }, obj[head || '']);\n}\nfunction extractDeepPropertyByParentMapKey(obj, map) {\n  const keys = map.split('.');\n  const tail = keys.pop();\n  const props = extractDeepPropertyByMapKey(obj, keys.join('.'));\n  return {\n    props,\n    tail\n  };\n}\nfunction getKeysTwoObjects(obj, other) {\n  return [...Object.keys(obj), ...Object.keys(other)].filter((key, index, array) => array.indexOf(key) === index);\n}\nfunction isDeepEqual(obj, other) {\n  if (!isObject(obj) || !isObject(other)) {\n    return obj === other;\n  }\n  return getKeysTwoObjects(obj, other).every(key => {\n    if (!isObject(obj[key]) && !isObject(other[key])) {\n      return obj[key] === other[key];\n    }\n    if (!isObject(obj[key]) || !isObject(other[key])) {\n      return false;\n    }\n    return isDeepEqual(obj[key], other[key]);\n  });\n}\nlet ReversePipe = /*#__PURE__*/(() => {\n  class ReversePipe {\n    transform(input) {\n      if (isString(input)) {\n        return input.split('').reverse().join('');\n      }\n      return Array.isArray(input) ? input.slice().reverse() : input;\n    }\n  }\n  ReversePipe.ɵfac = function ReversePipe_Factory(t) {\n    return new (t || ReversePipe)();\n  };\n  ReversePipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"reverse\",\n    type: ReversePipe,\n    pure: true\n  });\n  return ReversePipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TailPipe = /*#__PURE__*/(() => {\n  class TailPipe {\n    transform(input, num = 0) {\n      return Array.isArray(input) ? input.slice(num) : input;\n    }\n  }\n  TailPipe.ɵfac = function TailPipe_Factory(t) {\n    return new (t || TailPipe)();\n  };\n  TailPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"tail\",\n    type: TailPipe,\n    pure: true\n  });\n  return TailPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TrurthifyPipe = /*#__PURE__*/(() => {\n  class TrurthifyPipe {\n    transform(input) {\n      return Array.isArray(input) ? input.filter(e => !!e) : input;\n    }\n  }\n  TrurthifyPipe.ɵfac = function TrurthifyPipe_Factory(t) {\n    return new (t || TrurthifyPipe)();\n  };\n  TrurthifyPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"truthify\",\n    type: TrurthifyPipe,\n    pure: true\n  });\n  return TrurthifyPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet UnionPipe = /*#__PURE__*/(() => {\n  class UnionPipe {\n    transform(input, args = []) {\n      if (!Array.isArray(input) || !Array.isArray(args)) {\n        return input;\n      }\n      return args.reduce((newArr, currArr) => {\n        return newArr.concat(currArr.reduce((noDupArr, curr) => {\n          // tslint:disable-next-line:no-bitwise\n          return !~noDupArr.indexOf(curr) && !~newArr.indexOf(curr) ? noDupArr.concat([curr]) : noDupArr;\n        }, []));\n      }, input);\n    }\n  }\n  UnionPipe.ɵfac = function UnionPipe_Factory(t) {\n    return new (t || UnionPipe)();\n  };\n  UnionPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"union\",\n    type: UnionPipe,\n    pure: true\n  });\n  return UnionPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet UniquePipe = /*#__PURE__*/(() => {\n  class UniquePipe {\n    transform(input, propertyName) {\n      const uniques = [];\n      return Array.isArray(input) ? isUndefined(propertyName) ? input.filter((e, i) => input.indexOf(e) === i) : input.filter((e, i) => {\n        let value = extractDeepPropertyByMapKey(e, propertyName);\n        value = isObject(value) ? JSON.stringify(value) : value;\n        if (isUndefined(value) || uniques[value]) {\n          return false;\n        }\n        uniques[value] = true;\n        return true;\n      }) : input;\n    }\n  }\n  UniquePipe.ɵfac = function UniquePipe_Factory(t) {\n    return new (t || UniquePipe)();\n  };\n  UniquePipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"unique\",\n    type: UniquePipe,\n    pure: true\n  });\n  return UniquePipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet WithoutPipe = /*#__PURE__*/(() => {\n  class WithoutPipe {\n    transform(input, args = []) {\n      return Array.isArray(input) ?\n      // tslint:disable-next-line:no-bitwise\n      input.filter(e => !~args.indexOf(e)) : input;\n    }\n  }\n  WithoutPipe.ɵfac = function WithoutPipe_Factory(t) {\n    return new (t || WithoutPipe)();\n  };\n  WithoutPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"without\",\n    type: WithoutPipe,\n    pure: true\n  });\n  return WithoutPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet PluckPipe = /*#__PURE__*/(() => {\n  class PluckPipe {\n    transform(input, map) {\n      if (Array.isArray(input)) {\n        return input.map(e => extractDeepPropertyByMapKey(e, map));\n      }\n      return isObject(input) ? extractDeepPropertyByMapKey(input, map) : input;\n    }\n  }\n  PluckPipe.ɵfac = function PluckPipe_Factory(t) {\n    return new (t || PluckPipe)();\n  };\n  PluckPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"pluck\",\n    type: PluckPipe,\n    pure: false\n  });\n  return PluckPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ShufflePipe = /*#__PURE__*/(() => {\n  class ShufflePipe {\n    // Using a version of the Fisher-Yates shuffle algorithm\n    // https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\n    transform(input) {\n      if (!Array.isArray(input)) {\n        return input;\n      }\n      const shuffled = [...input];\n      const n = input.length - 1;\n      for (let i = 0; i < n; ++i) {\n        const j = Math.floor(Math.random() * (n - i + 1)) + i;\n        [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n      }\n      return shuffled;\n    }\n  }\n  ShufflePipe.ɵfac = function ShufflePipe_Factory(t) {\n    return new (t || ShufflePipe)();\n  };\n  ShufflePipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"shuffle\",\n    type: ShufflePipe,\n    pure: true\n  });\n  return ShufflePipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet EveryPipe = /*#__PURE__*/(() => {\n  class EveryPipe {\n    transform(input, predicate) {\n      return Array.isArray(input) ? input.every(predicate) : false;\n    }\n  }\n  EveryPipe.ɵfac = function EveryPipe_Factory(t) {\n    return new (t || EveryPipe)();\n  };\n  EveryPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"every\",\n    type: EveryPipe,\n    pure: true\n  });\n  return EveryPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet SomePipe = /*#__PURE__*/(() => {\n  class SomePipe {\n    transform(input, predicate) {\n      return Array.isArray(input) ? input.some(predicate) : input;\n    }\n  }\n  SomePipe.ɵfac = function SomePipe_Factory(t) {\n    return new (t || SomePipe)();\n  };\n  SomePipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"some\",\n    type: SomePipe,\n    pure: true\n  });\n  return SomePipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet SamplePipe = /*#__PURE__*/(() => {\n  class SamplePipe {\n    transform(input, len = 1) {\n      if (!Array.isArray(input)) {\n        return input;\n      }\n      let sample = [];\n      const tmp = [...input];\n      const l = len < tmp.length ? len : tmp.length;\n      for (let i = 0; i < l; ++i) {\n        sample = sample.concat(tmp.splice(Math.floor(Math.random() * tmp.length), 1));\n      }\n      return sample;\n    }\n  }\n  SamplePipe.ɵfac = function SamplePipe_Factory(t) {\n    return new (t || SamplePipe)();\n  };\n  SamplePipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"sample\",\n    type: SamplePipe,\n    pure: true\n  });\n  return SamplePipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet GroupByPipe = /*#__PURE__*/(() => {\n  class GroupByPipe {\n    transform(input, discriminator = [], delimiter = '|') {\n      if (!Array.isArray(input)) {\n        return input;\n      }\n      return this.groupBy(input, discriminator, delimiter);\n    }\n    groupBy(list, discriminator, delimiter) {\n      return list.reduce((acc, payload) => {\n        const key = this.extractKeyByDiscriminator(discriminator, payload, delimiter);\n        acc[key] = Array.isArray(acc[key]) ? acc[key].concat([payload]) : [payload];\n        return acc;\n      }, {});\n    }\n    extractKeyByDiscriminator(discriminator, payload, delimiter) {\n      if (isFunction(discriminator)) {\n        return discriminator(payload);\n      }\n      if (Array.isArray(discriminator)) {\n        return discriminator.map(k => extractDeepPropertyByMapKey(payload, k)).join(delimiter);\n      }\n      return extractDeepPropertyByMapKey(payload, discriminator);\n    }\n  }\n  GroupByPipe.ɵfac = function GroupByPipe_Factory(t) {\n    return new (t || GroupByPipe)();\n  };\n  GroupByPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"groupBy\",\n    type: GroupByPipe,\n    pure: true\n  });\n  return GroupByPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n// tslint:disable no-bitwise\nlet FilterByPipe = /*#__PURE__*/(() => {\n  class FilterByPipe {\n    transform(input, props, search = '', strict = false) {\n      if (!Array.isArray(input) || !Array.isArray(search) && !isString(search) && !isNumberFinite(search) && !isBoolean(search)) {\n        return input;\n      }\n      const terms = String(search).toLowerCase().split(',');\n      return input.filter(obj => {\n        return props.some(prop => {\n          return terms.some(term => {\n            const value = extractDeepPropertyByMapKey(obj, prop);\n            /* tslint:disable */\n            const {\n              props,\n              tail\n            } = extractDeepPropertyByParentMapKey(obj, prop);\n            if (isUndefined(value) && !isUndefined(props) && Array.isArray(props)) {\n              return props.some(parent => {\n                const str = String(parent[tail]).toLowerCase();\n                return strict ? str === term : !!~str.indexOf(term);\n              });\n            }\n            if (isUndefined(value)) {\n              return false;\n            }\n            const strValue = String(value).toLowerCase();\n            return strict ? term === strValue : !!~strValue.indexOf(term);\n          });\n        });\n      });\n    }\n  }\n  FilterByPipe.ɵfac = function FilterByPipe_Factory(t) {\n    return new (t || FilterByPipe)();\n  };\n  FilterByPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"filterBy\",\n    type: FilterByPipe,\n    pure: true\n  });\n  return FilterByPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet OrderByPipe = /*#__PURE__*/(() => {\n  class OrderByPipe {\n    transform(input, config) {\n      if (!Array.isArray(input)) {\n        return input;\n      }\n      const out = [...input];\n      // sort by multiple properties\n      if (Array.isArray(config)) {\n        return out.sort((a, b) => {\n          const l = config.length;\n          for (let i = 0; i < l; ++i) {\n            const [prop, asc] = OrderByPipe.extractFromConfig(config[i]);\n            const pos = OrderByPipe.orderCompare(prop, asc, a, b);\n            if (pos !== 0) {\n              return pos;\n            }\n          }\n          return 0;\n        });\n      }\n      // sort by a single property value\n      if (isString(config)) {\n        const [prop, asc, sign] = OrderByPipe.extractFromConfig(config);\n        if (config.length === 1) {\n          // tslint:disable-next-line:switch-default\n          switch (sign) {\n            case '+':\n              return out.sort(OrderByPipe.simpleSort.bind(this));\n            case '-':\n              return out.sort(OrderByPipe.simpleSort.bind(this)).reverse();\n          }\n        }\n        return out.sort(OrderByPipe.orderCompare.bind(this, prop, asc));\n      }\n      // default sort by value\n      return out.sort(OrderByPipe.simpleSort.bind(this));\n    }\n    static simpleSort(a, b) {\n      return isString(a) && isString(b) ? a.toLowerCase().localeCompare(b.toLowerCase()) : a - b;\n    }\n    static orderCompare(prop, asc, a, b) {\n      const first = extractDeepPropertyByMapKey(a, prop);\n      const second = extractDeepPropertyByMapKey(b, prop);\n      if (first === second) {\n        return 0;\n      }\n      if (isUndefined(first) || first === '') {\n        return 1;\n      }\n      if (isUndefined(second) || second === '') {\n        return -1;\n      }\n      if (isString(first) && isString(second)) {\n        const pos = first.toLowerCase().localeCompare(second.toLowerCase());\n        return asc ? pos : -pos;\n      }\n      return asc ? first - second : second - first;\n    }\n    static extractFromConfig(config) {\n      const sign = config.substr(0, 1);\n      const prop = config.replace(/^[-+]/, '');\n      const asc = sign !== '-';\n      return [prop, asc, sign];\n    }\n  }\n  OrderByPipe.ɵfac = function OrderByPipe_Factory(t) {\n    return new (t || OrderByPipe)();\n  };\n  OrderByPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"orderBy\",\n    type: OrderByPipe,\n    pure: true\n  });\n  return OrderByPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n// tslint:disable use-pipe-transform-interface\nlet GroupByImpurePipe = /*#__PURE__*/(() => {\n  class GroupByImpurePipe extends GroupByPipe {}\n  GroupByImpurePipe.ɵfac = /* @__PURE__ */function () {\n    let ɵGroupByImpurePipe_BaseFactory;\n    return function GroupByImpurePipe_Factory(t) {\n      return (ɵGroupByImpurePipe_BaseFactory || (ɵGroupByImpurePipe_BaseFactory = i0.ɵɵgetInheritedFactory(GroupByImpurePipe)))(t || GroupByImpurePipe);\n    };\n  }();\n  GroupByImpurePipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"groupByImpure\",\n    type: GroupByImpurePipe,\n    pure: false\n  });\n  return GroupByImpurePipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n// tslint:disable use-pipe-transform-interface\nlet FilterByImpurePipe = /*#__PURE__*/(() => {\n  class FilterByImpurePipe extends FilterByPipe {}\n  FilterByImpurePipe.ɵfac = /* @__PURE__ */function () {\n    let ɵFilterByImpurePipe_BaseFactory;\n    return function FilterByImpurePipe_Factory(t) {\n      return (ɵFilterByImpurePipe_BaseFactory || (ɵFilterByImpurePipe_BaseFactory = i0.ɵɵgetInheritedFactory(FilterByImpurePipe)))(t || FilterByImpurePipe);\n    };\n  }();\n  FilterByImpurePipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"filterByImpure\",\n    type: FilterByImpurePipe,\n    pure: false\n  });\n  return FilterByImpurePipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n// tslint:disable use-pipe-transform-interface\nlet OrderByImpurePipe = /*#__PURE__*/(() => {\n  class OrderByImpurePipe extends OrderByPipe {}\n  OrderByImpurePipe.ɵfac = /* @__PURE__ */function () {\n    let ɵOrderByImpurePipe_BaseFactory;\n    return function OrderByImpurePipe_Factory(t) {\n      return (ɵOrderByImpurePipe_BaseFactory || (ɵOrderByImpurePipe_BaseFactory = i0.ɵɵgetInheritedFactory(OrderByImpurePipe)))(t || OrderByImpurePipe);\n    };\n  }();\n  OrderByImpurePipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"orderByImpure\",\n    type: OrderByImpurePipe,\n    pure: false\n  });\n  return OrderByImpurePipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet RangePipe = /*#__PURE__*/(() => {\n  class RangePipe {\n    transform(start = 1, count = 0, step = 1) {\n      return Array(count).fill('').map((v, i) => step * i + start);\n    }\n  }\n  RangePipe.ɵfac = function RangePipe_Factory(t) {\n    return new (t || RangePipe)();\n  };\n  RangePipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"range\",\n    type: RangePipe,\n    pure: true\n  });\n  return RangePipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ChunkPipe = /*#__PURE__*/(() => {\n  class ChunkPipe {\n    transform(input, size = 1) {\n      if (isString(input)) {\n        return this.chunk(input.split(''), size);\n      }\n      return Array.isArray(input) ? this.chunk(input, size) : input;\n    }\n    chunk(input, size) {\n      return Array(Math.ceil(input.length / size)).fill([]).map((_, index) => index * size).map(begin => input.slice(begin, begin + size));\n    }\n  }\n  ChunkPipe.ɵfac = function ChunkPipe_Factory(t) {\n    return new (t || ChunkPipe)();\n  };\n  ChunkPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"chunk\",\n    type: ChunkPipe,\n    pure: true\n  });\n  return ChunkPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet FromPairsPipe = /*#__PURE__*/(() => {\n  class FromPairsPipe {\n    transform(input) {\n      if (!Array.isArray(input)) {\n        return input;\n      }\n      return input.reduce((obj, arr) => {\n        if (!Array.isArray(arr)) {\n          return obj;\n        }\n        const [prop, val] = arr;\n        obj[prop] = val;\n        return obj;\n      }, {});\n    }\n  }\n  FromPairsPipe.ɵfac = function FromPairsPipe_Factory(t) {\n    return new (t || FromPairsPipe)();\n  };\n  FromPairsPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"fromPairs\",\n    type: FromPairsPipe,\n    pure: true\n  });\n  return FromPairsPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst ARRAY_PIPES = [DiffPipe, FlattenPipe, InitialPipe, IntersectionPipe, ReversePipe, TailPipe, TrurthifyPipe, UnionPipe, UniquePipe, WithoutPipe, PluckPipe, ShufflePipe, EveryPipe, SomePipe, SamplePipe, GroupByPipe, GroupByImpurePipe, FilterByPipe, FilterByImpurePipe, OrderByPipe, OrderByImpurePipe, RangePipe, ChunkPipe, FromPairsPipe];\nlet NgArrayPipesModule = /*#__PURE__*/(() => {\n  class NgArrayPipesModule {}\n  NgArrayPipesModule.ɵfac = function NgArrayPipesModule_Factory(t) {\n    return new (t || NgArrayPipesModule)();\n  };\n  NgArrayPipesModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgArrayPipesModule\n  });\n  NgArrayPipesModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return NgArrayPipesModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet KeysPipe = /*#__PURE__*/(() => {\n  class KeysPipe {\n    transform(obj) {\n      if (Array.isArray(obj) || !isObject(obj)) {\n        return obj;\n      }\n      return Object.keys(obj);\n    }\n  }\n  KeysPipe.ɵfac = function KeysPipe_Factory(t) {\n    return new (t || KeysPipe)();\n  };\n  KeysPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"keys\",\n    type: KeysPipe,\n    pure: true\n  });\n  return KeysPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ValuesPipe = /*#__PURE__*/(() => {\n  class ValuesPipe {\n    transform(obj) {\n      if (Array.isArray(obj) || !isObject(obj)) {\n        return obj;\n      }\n      return Object.keys(obj).map(k => obj[k]);\n    }\n  }\n  ValuesPipe.ɵfac = function ValuesPipe_Factory(t) {\n    return new (t || ValuesPipe)();\n  };\n  ValuesPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"values\",\n    type: ValuesPipe,\n    pure: true\n  });\n  return ValuesPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet PairsPipe = /*#__PURE__*/(() => {\n  class PairsPipe {\n    transform(obj) {\n      if (Array.isArray(obj) || !isObject(obj)) {\n        return obj;\n      }\n      return Object.entries(obj);\n    }\n  }\n  PairsPipe.ɵfac = function PairsPipe_Factory(t) {\n    return new (t || PairsPipe)();\n  };\n  PairsPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"pairs\",\n    type: PairsPipe,\n    pure: true\n  });\n  return PairsPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet PickPipe = /*#__PURE__*/(() => {\n  class PickPipe {\n    transform(obj, ...args) {\n      if (Array.isArray(obj) || !isObject(obj)) {\n        return obj;\n      }\n      return args.reduce((o, k) => {\n        return Object.assign(o, {\n          [k]: obj[k]\n        });\n      }, {});\n    }\n  }\n  PickPipe.ɵfac = function PickPipe_Factory(t) {\n    return new (t || PickPipe)();\n  };\n  PickPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"pick\",\n    type: PickPipe,\n    pure: true\n  });\n  return PickPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet OmitPipe = /*#__PURE__*/(() => {\n  class OmitPipe {\n    transform(obj, ...args) {\n      if (Array.isArray(obj) || !isObject(obj)) {\n        return obj;\n      }\n      return Object.keys(obj)\n      // tslint:disable-next-line:no-bitwise\n      .filter(k => !~args.indexOf(k)).reduce((o, k) => {\n        return Object.assign(o, {\n          [k]: obj[k]\n        });\n      }, {});\n    }\n  }\n  OmitPipe.ɵfac = function OmitPipe_Factory(t) {\n    return new (t || OmitPipe)();\n  };\n  OmitPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"omit\",\n    type: OmitPipe,\n    pure: true\n  });\n  return OmitPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet InvertPipe = /*#__PURE__*/(() => {\n  class InvertPipe {\n    transform(obj) {\n      if (Array.isArray(obj) || !isObject(obj)) {\n        return obj;\n      }\n      return Object.keys(obj).reduce((o, k) => {\n        return Object.assign(o, {\n          [obj[k]]: k\n        });\n      }, {});\n    }\n  }\n  InvertPipe.ɵfac = function InvertPipe_Factory(t) {\n    return new (t || InvertPipe)();\n  };\n  InvertPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"invert\",\n    type: InvertPipe,\n    pure: true\n  });\n  return InvertPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet InvertByPipe = /*#__PURE__*/(() => {\n  class InvertByPipe {\n    transform(obj, cb) {\n      if (Array.isArray(obj) || !isObject(obj)) {\n        return obj;\n      }\n      return Object.keys(obj).reduce((o, k) => {\n        const key = cb ? cb(obj[k]) : obj[k];\n        return Array.isArray(o[key]) ? (o[key].push(k), o) : Object.assign(o, {\n          [key]: [k]\n        });\n      }, {});\n    }\n  }\n  InvertByPipe.ɵfac = function InvertByPipe_Factory(t) {\n    return new (t || InvertByPipe)();\n  };\n  InvertByPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"invertBy\",\n    type: InvertByPipe,\n    pure: true\n  });\n  return InvertByPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet DiffObjPipe = /*#__PURE__*/(() => {\n  class DiffObjPipe {\n    transform(obj, original = {}) {\n      if (Array.isArray(obj) || Array.isArray(original) || !isObject(obj) || !isObject(original)) {\n        return {};\n      }\n      return getKeysTwoObjects(obj, original).reduce((diff, key) => {\n        if (!isDeepEqual(original[key], obj[key])) {\n          diff[key] = obj[key];\n        }\n        return diff;\n      }, {});\n    }\n  }\n  DiffObjPipe.ɵfac = function DiffObjPipe_Factory(t) {\n    return new (t || DiffObjPipe)();\n  };\n  DiffObjPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"diffObj\",\n    type: DiffObjPipe,\n    pure: true\n  });\n  return DiffObjPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst OBJECT_PIPES = [KeysPipe, ValuesPipe, PairsPipe, PickPipe, InvertPipe, InvertByPipe, OmitPipe, DiffObjPipe];\nlet NgObjectPipesModule = /*#__PURE__*/(() => {\n  class NgObjectPipesModule {}\n  NgObjectPipesModule.ɵfac = function NgObjectPipesModule_Factory(t) {\n    return new (t || NgObjectPipesModule)();\n  };\n  NgObjectPipesModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgObjectPipesModule\n  });\n  NgObjectPipesModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return NgObjectPipesModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Takes a string and returns the string prepended by 'a' or 'an'.\n * Uses both naive and holdout-list approaches.\n * @constructor\n * @param {string} stringEntity - Entity to prepend 'a' or 'an' to.\n */\nlet AorAnPipe = /*#__PURE__*/(() => {\n  class AorAnPipe {\n    constructor() {\n      this.irregularMap = {\n        herb: 'an',\n        honor: 'an',\n        honorable: 'an',\n        hour: 'an',\n        mba: 'an',\n        msc: 'an',\n        'm.sc.': 'an',\n        unicorn: 'a'\n      };\n    }\n    transform(stringEntity) {\n      if (!stringEntity || stringEntity === '') {\n        return '';\n      } else {\n        const firstWord = stringEntity.trim().split(' ')[0];\n        if (this.irregularMap[firstWord.toLocaleLowerCase()]) {\n          return `${this.irregularMap[firstWord.toLocaleLowerCase()]} ${stringEntity}`;\n        } else {\n          return isVowel(stringEntity[0]) ? `an ${stringEntity}` : `a ${stringEntity}`;\n        }\n      }\n    }\n  }\n  AorAnPipe.ɵfac = function AorAnPipe_Factory(t) {\n    return new (t || AorAnPipe)();\n  };\n  AorAnPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"aOrAn\",\n    type: AorAnPipe,\n    pure: true\n  });\n  return AorAnPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet UcWordsPipe = /*#__PURE__*/(() => {\n  class UcWordsPipe {\n    transform(text) {\n      if (isString(text)) {\n        return text.split(' ').map(sub => ucFirst(sub)).join(' ');\n      }\n      return text;\n    }\n  }\n  UcWordsPipe.ɵfac = function UcWordsPipe_Factory(t) {\n    return new (t || UcWordsPipe)();\n  };\n  UcWordsPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"ucwords\",\n    type: UcWordsPipe,\n    pure: true\n  });\n  return UcWordsPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet LeftTrimPipe = /*#__PURE__*/(() => {\n  class LeftTrimPipe {\n    transform(text, chars = '\\\\s') {\n      return isString(text) ? text.replace(new RegExp(`^[${chars}]+`), '') : text;\n    }\n  }\n  LeftTrimPipe.ɵfac = function LeftTrimPipe_Factory(t) {\n    return new (t || LeftTrimPipe)();\n  };\n  LeftTrimPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"ltrim\",\n    type: LeftTrimPipe,\n    pure: true\n  });\n  return LeftTrimPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet RepeatPipe = /*#__PURE__*/(() => {\n  class RepeatPipe {\n    transform(str, n = 1, separator = '') {\n      if (n <= 0) {\n        throw new RangeError();\n      }\n      return n === 1 ? str : this.repeat(str, n - 1, separator);\n    }\n    repeat(str, n, separator) {\n      return isString(str) ? n === 0 ? str : str + separator + this.repeat(str, n - 1, separator) : str;\n    }\n  }\n  RepeatPipe.ɵfac = function RepeatPipe_Factory(t) {\n    return new (t || RepeatPipe)();\n  };\n  RepeatPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"repeat\",\n    type: RepeatPipe,\n    pure: true\n  });\n  return RepeatPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet RightTrimPipe = /*#__PURE__*/(() => {\n  class RightTrimPipe {\n    transform(text, chars = '\\\\s') {\n      return isString(text) ? text.replace(new RegExp(`[${chars}]+$`), '') : text;\n    }\n  }\n  RightTrimPipe.ɵfac = function RightTrimPipe_Factory(t) {\n    return new (t || RightTrimPipe)();\n  };\n  RightTrimPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"rtrim\",\n    type: RightTrimPipe,\n    pure: true\n  });\n  return RightTrimPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ScanPipe = /*#__PURE__*/(() => {\n  class ScanPipe {\n    transform(text, args = []) {\n      return isString(text) ? text.replace(/\\{(\\d+)}/g, (match, index) => !isUndefined(args[index]) ? args[index] : match) : text;\n    }\n  }\n  ScanPipe.ɵfac = function ScanPipe_Factory(t) {\n    return new (t || ScanPipe)();\n  };\n  ScanPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"scan\",\n    type: ScanPipe,\n    pure: true\n  });\n  return ScanPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ShortenPipe = /*#__PURE__*/(() => {\n  class ShortenPipe {\n    transform(text, length = 0, suffix = '', wordBreak = true) {\n      if (!isString(text)) {\n        return text;\n      }\n      if (text.length > length) {\n        if (wordBreak) {\n          return text.slice(0, length) + suffix;\n        }\n        // tslint:disable-next-line:no-bitwise\n        if (!!~text.indexOf(' ', length)) {\n          return text.slice(0, text.indexOf(' ', length)) + suffix;\n        }\n      }\n      return text;\n    }\n  }\n  ShortenPipe.ɵfac = function ShortenPipe_Factory(t) {\n    return new (t || ShortenPipe)();\n  };\n  ShortenPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"shorten\",\n    type: ShortenPipe,\n    pure: true\n  });\n  return ShortenPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet StripTagsPipe = /*#__PURE__*/(() => {\n  class StripTagsPipe {\n    transform(text, ...allowedTags) {\n      return allowedTags.length > 0 ? text.replace(new RegExp(`<(?!\\/?(${allowedTags.join('|')})\\s*\\/?)[^>]+>`, 'g'), '') : text.replace(/<(?:.|\\s)*?>/g, '');\n    }\n  }\n  StripTagsPipe.ɵfac = function StripTagsPipe_Factory(t) {\n    return new (t || StripTagsPipe)();\n  };\n  StripTagsPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"stripTags\",\n    type: StripTagsPipe,\n    pure: true\n  });\n  return StripTagsPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TrimPipe = /*#__PURE__*/(() => {\n  class TrimPipe {\n    transform(text, chars = '\\\\s') {\n      return isString(text) ? text.replace(new RegExp(`^[${chars}]+|[${chars}]+$`, 'g'), '') : text;\n    }\n  }\n  TrimPipe.ɵfac = function TrimPipe_Factory(t) {\n    return new (t || TrimPipe)();\n  };\n  TrimPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"trim\",\n    type: TrimPipe,\n    pure: true\n  });\n  return TrimPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet UcFirstPipe = /*#__PURE__*/(() => {\n  class UcFirstPipe {\n    transform(text) {\n      return isString(text) ? ucFirst(text) : text;\n    }\n  }\n  UcFirstPipe.ɵfac = function UcFirstPipe_Factory(t) {\n    return new (t || UcFirstPipe)();\n  };\n  UcFirstPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"ucfirst\",\n    type: UcFirstPipe,\n    pure: true\n  });\n  return UcFirstPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet SlugifyPipe = /*#__PURE__*/(() => {\n  class SlugifyPipe {\n    transform(str) {\n      return isString(str) ? str.toLowerCase().trim().replace(/[^\\w\\-]+/g, ' ').replace(/\\s+/g, '-') : str;\n    }\n  }\n  SlugifyPipe.ɵfac = function SlugifyPipe_Factory(t) {\n    return new (t || SlugifyPipe)();\n  };\n  SlugifyPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"slugify\",\n    type: SlugifyPipe,\n    pure: true\n  });\n  return SlugifyPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet CamelizePipe = /*#__PURE__*/(() => {\n  class CamelizePipe {\n    transform(text, chars = '\\\\s') {\n      if (!isString(text)) {\n        return text;\n      }\n      return text.toLowerCase().split(/[-_\\s]/g).filter(v => !!v).map((word, key) => {\n        return !key ? word : word.slice(0, 1).toUpperCase() + word.slice(1);\n      }).join('');\n    }\n  }\n  CamelizePipe.ɵfac = function CamelizePipe_Factory(t) {\n    return new (t || CamelizePipe)();\n  };\n  CamelizePipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"camelize\",\n    type: CamelizePipe,\n    pure: true\n  });\n  return CamelizePipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet LatinisePipe = /*#__PURE__*/(() => {\n  class LatinisePipe {\n    constructor() {\n      // Source: http://semplicewebsites.com/removing-accents-javascript\n      // tslint:disable-next-line whitespace max-line-length object-literal-key-quotes\n      this.latinMap = {\n        'Á': 'A',\n        'Ă': 'A',\n        'Ắ': 'A',\n        'Ặ': 'A',\n        'Ằ': 'A',\n        'Ẳ': 'A',\n        'Ẵ': 'A',\n        'Ǎ': 'A',\n        'Â': 'A',\n        'Ấ': 'A',\n        'Ậ': 'A',\n        'Ầ': 'A',\n        'Ẩ': 'A',\n        'Ẫ': 'A',\n        'Ä': 'A',\n        'Ǟ': 'A',\n        'Ȧ': 'A',\n        'Ǡ': 'A',\n        'Ạ': 'A',\n        'Ȁ': 'A',\n        'À': 'A',\n        'Ả': 'A',\n        'Ȃ': 'A',\n        'Ā': 'A',\n        'Ą': 'A',\n        'Å': 'A',\n        'Ǻ': 'A',\n        'Ḁ': 'A',\n        'Ⱥ': 'A',\n        'Ã': 'A',\n        'Ꜳ': 'AA',\n        'Æ': 'AE',\n        'Ǽ': 'AE',\n        'Ǣ': 'AE',\n        'Ꜵ': 'AO',\n        'Ꜷ': 'AU',\n        'Ꜹ': 'AV',\n        'Ꜻ': 'AV',\n        'Ꜽ': 'AY',\n        'Ḃ': 'B',\n        'Ḅ': 'B',\n        'Ɓ': 'B',\n        'Ḇ': 'B',\n        'Ƀ': 'B',\n        'Ƃ': 'B',\n        'Ć': 'C',\n        'Č': 'C',\n        'Ç': 'C',\n        'Ḉ': 'C',\n        'Ĉ': 'C',\n        'Ċ': 'C',\n        'Ƈ': 'C',\n        'Ȼ': 'C',\n        'Ď': 'D',\n        'Ḑ': 'D',\n        'Ḓ': 'D',\n        'Ḋ': 'D',\n        'Ḍ': 'D',\n        'Ɗ': 'D',\n        'Ḏ': 'D',\n        'ǲ': 'D',\n        'ǅ': 'D',\n        'Đ': 'D',\n        'Ƌ': 'D',\n        'Ǳ': 'DZ',\n        'Ǆ': 'DZ',\n        'É': 'E',\n        'Ĕ': 'E',\n        'Ě': 'E',\n        'Ȩ': 'E',\n        'Ḝ': 'E',\n        'Ê': 'E',\n        'Ế': 'E',\n        'Ệ': 'E',\n        'Ề': 'E',\n        'Ể': 'E',\n        'Ễ': 'E',\n        'Ḙ': 'E',\n        'Ë': 'E',\n        'Ė': 'E',\n        'Ẹ': 'E',\n        'Ȅ': 'E',\n        'È': 'E',\n        'Ẻ': 'E',\n        'Ȇ': 'E',\n        'Ē': 'E',\n        'Ḗ': 'E',\n        'Ḕ': 'E',\n        'Ę': 'E',\n        'Ɇ': 'E',\n        'Ẽ': 'E',\n        'Ḛ': 'E',\n        'Ꝫ': 'ET',\n        'Ḟ': 'F',\n        'Ƒ': 'F',\n        'Ǵ': 'G',\n        'Ğ': 'G',\n        'Ǧ': 'G',\n        'Ģ': 'G',\n        'Ĝ': 'G',\n        'Ġ': 'G',\n        'Ɠ': 'G',\n        'Ḡ': 'G',\n        'Ǥ': 'G',\n        'Ḫ': 'H',\n        'Ȟ': 'H',\n        'Ḩ': 'H',\n        'Ĥ': 'H',\n        'Ⱨ': 'H',\n        'Ḧ': 'H',\n        'Ḣ': 'H',\n        'Ḥ': 'H',\n        'Ħ': 'H',\n        'Í': 'I',\n        'Ĭ': 'I',\n        'Ǐ': 'I',\n        'Î': 'I',\n        'Ï': 'I',\n        'Ḯ': 'I',\n        'İ': 'I',\n        'Ị': 'I',\n        'Ȉ': 'I',\n        'Ì': 'I',\n        'Ỉ': 'I',\n        'Ȋ': 'I',\n        'Ī': 'I',\n        'Į': 'I',\n        'Ɨ': 'I',\n        'Ĩ': 'I',\n        'Ḭ': 'I',\n        'Ꝺ': 'D',\n        'Ꝼ': 'F',\n        'Ᵹ': 'G',\n        'Ꞃ': 'R',\n        'Ꞅ': 'S',\n        'Ꞇ': 'T',\n        'Ꝭ': 'IS',\n        'Ĵ': 'J',\n        'Ɉ': 'J',\n        'Ḱ': 'K',\n        'Ǩ': 'K',\n        'Ķ': 'K',\n        'Ⱪ': 'K',\n        'Ꝃ': 'K',\n        'Ḳ': 'K',\n        'Ƙ': 'K',\n        'Ḵ': 'K',\n        'Ꝁ': 'K',\n        'Ꝅ': 'K',\n        'Ĺ': 'L',\n        'Ƚ': 'L',\n        'Ľ': 'L',\n        'Ļ': 'L',\n        'Ḽ': 'L',\n        'Ḷ': 'L',\n        'Ḹ': 'L',\n        'Ⱡ': 'L',\n        'Ꝉ': 'L',\n        'Ḻ': 'L',\n        'Ŀ': 'L',\n        'Ɫ': 'L',\n        'ǈ': 'L',\n        'Ł': 'L',\n        'Ǉ': 'LJ',\n        'Ḿ': 'M',\n        'Ṁ': 'M',\n        'Ṃ': 'M',\n        'Ɱ': 'M',\n        'Ń': 'N',\n        'Ň': 'N',\n        'Ņ': 'N',\n        'Ṋ': 'N',\n        'Ṅ': 'N',\n        'Ṇ': 'N',\n        'Ǹ': 'N',\n        'Ɲ': 'N',\n        'Ṉ': 'N',\n        'Ƞ': 'N',\n        'ǋ': 'N',\n        'Ñ': 'N',\n        'Ǌ': 'NJ',\n        'Ó': 'O',\n        'Ŏ': 'O',\n        'Ǒ': 'O',\n        'Ô': 'O',\n        'Ố': 'O',\n        'Ộ': 'O',\n        'Ồ': 'O',\n        'Ổ': 'O',\n        'Ỗ': 'O',\n        'Ö': 'O',\n        'Ȫ': 'O',\n        'Ȯ': 'O',\n        'Ȱ': 'O',\n        'Ọ': 'O',\n        'Ő': 'O',\n        'Ȍ': 'O',\n        'Ò': 'O',\n        'Ỏ': 'O',\n        'Ơ': 'O',\n        'Ớ': 'O',\n        'Ợ': 'O',\n        'Ờ': 'O',\n        'Ở': 'O',\n        'Ỡ': 'O',\n        'Ȏ': 'O',\n        'Ꝋ': 'O',\n        'Ꝍ': 'O',\n        'Ō': 'O',\n        'Ṓ': 'O',\n        'Ṑ': 'O',\n        'Ɵ': 'O',\n        'Ǫ': 'O',\n        'Ǭ': 'O',\n        'Ø': 'O',\n        'Ǿ': 'O',\n        'Õ': 'O',\n        'Ṍ': 'O',\n        'Ṏ': 'O',\n        'Ȭ': 'O',\n        'Ƣ': 'OI',\n        'Ꝏ': 'OO',\n        'Ɛ': 'E',\n        'Ɔ': 'O',\n        'Ȣ': 'OU',\n        'Ṕ': 'P',\n        'Ṗ': 'P',\n        'Ꝓ': 'P',\n        'Ƥ': 'P',\n        'Ꝕ': 'P',\n        'Ᵽ': 'P',\n        'Ꝑ': 'P',\n        'Ꝙ': 'Q',\n        'Ꝗ': 'Q',\n        'Ŕ': 'R',\n        'Ř': 'R',\n        'Ŗ': 'R',\n        'Ṙ': 'R',\n        'Ṛ': 'R',\n        'Ṝ': 'R',\n        'Ȑ': 'R',\n        'Ȓ': 'R',\n        'Ṟ': 'R',\n        'Ɍ': 'R',\n        'Ɽ': 'R',\n        'Ꜿ': 'C',\n        'Ǝ': 'E',\n        'Ś': 'S',\n        'Ṥ': 'S',\n        'Š': 'S',\n        'Ṧ': 'S',\n        'Ş': 'S',\n        'Ŝ': 'S',\n        'Ș': 'S',\n        'Ṡ': 'S',\n        'Ṣ': 'S',\n        'Ṩ': 'S',\n        'ẞ': 'SS',\n        'Ť': 'T',\n        'Ţ': 'T',\n        'Ṱ': 'T',\n        'Ț': 'T',\n        'Ⱦ': 'T',\n        'Ṫ': 'T',\n        'Ṭ': 'T',\n        'Ƭ': 'T',\n        'Ṯ': 'T',\n        'Ʈ': 'T',\n        'Ŧ': 'T',\n        'Ɐ': 'A',\n        'Ꞁ': 'L',\n        'Ɯ': 'M',\n        'Ʌ': 'V',\n        'Ꜩ': 'TZ',\n        'Ú': 'U',\n        'Ŭ': 'U',\n        'Ǔ': 'U',\n        'Û': 'U',\n        'Ṷ': 'U',\n        'Ü': 'U',\n        'Ǘ': 'U',\n        'Ǚ': 'U',\n        'Ǜ': 'U',\n        'Ǖ': 'U',\n        'Ṳ': 'U',\n        'Ụ': 'U',\n        'Ű': 'U',\n        'Ȕ': 'U',\n        'Ù': 'U',\n        'Ủ': 'U',\n        'Ư': 'U',\n        'Ứ': 'U',\n        'Ự': 'U',\n        'Ừ': 'U',\n        'Ử': 'U',\n        'Ữ': 'U',\n        'Ȗ': 'U',\n        'Ū': 'U',\n        'Ṻ': 'U',\n        'Ų': 'U',\n        'Ů': 'U',\n        'Ũ': 'U',\n        'Ṹ': 'U',\n        'Ṵ': 'U',\n        'Ꝟ': 'V',\n        'Ṿ': 'V',\n        'Ʋ': 'V',\n        'Ṽ': 'V',\n        'Ꝡ': 'VY',\n        'Ẃ': 'W',\n        'Ŵ': 'W',\n        'Ẅ': 'W',\n        'Ẇ': 'W',\n        'Ẉ': 'W',\n        'Ẁ': 'W',\n        'Ⱳ': 'W',\n        'Ẍ': 'X',\n        'Ẋ': 'X',\n        'Ý': 'Y',\n        'Ŷ': 'Y',\n        'Ÿ': 'Y',\n        'Ẏ': 'Y',\n        'Ỵ': 'Y',\n        'Ỳ': 'Y',\n        'Ƴ': 'Y',\n        'Ỷ': 'Y',\n        'Ỿ': 'Y',\n        'Ȳ': 'Y',\n        'Ɏ': 'Y',\n        'Ỹ': 'Y',\n        'Ź': 'Z',\n        'Ž': 'Z',\n        'Ẑ': 'Z',\n        'Ⱬ': 'Z',\n        'Ż': 'Z',\n        'Ẓ': 'Z',\n        'Ȥ': 'Z',\n        'Ẕ': 'Z',\n        'Ƶ': 'Z',\n        'Ĳ': 'IJ',\n        'Œ': 'OE',\n        'ᴀ': 'A',\n        'ᴁ': 'AE',\n        'ʙ': 'B',\n        'ᴃ': 'B',\n        'ᴄ': 'C',\n        'ᴅ': 'D',\n        'ᴇ': 'E',\n        'ꜰ': 'F',\n        'ɢ': 'G',\n        'ʛ': 'G',\n        'ʜ': 'H',\n        'ɪ': 'I',\n        'ʁ': 'R',\n        'ᴊ': 'J',\n        'ᴋ': 'K',\n        'ʟ': 'L',\n        'ᴌ': 'L',\n        'ᴍ': 'M',\n        'ɴ': 'N',\n        'ᴏ': 'O',\n        'ɶ': 'OE',\n        'ᴐ': 'O',\n        'ᴕ': 'OU',\n        'ᴘ': 'P',\n        'ʀ': 'R',\n        'ᴎ': 'N',\n        'ᴙ': 'R',\n        'ꜱ': 'S',\n        'ᴛ': 'T',\n        'ⱻ': 'E',\n        'ᴚ': 'R',\n        'ᴜ': 'U',\n        'ᴠ': 'V',\n        'ᴡ': 'W',\n        'ʏ': 'Y',\n        'ᴢ': 'Z',\n        'á': 'a',\n        'ă': 'a',\n        'ắ': 'a',\n        'ặ': 'a',\n        'ằ': 'a',\n        'ẳ': 'a',\n        'ẵ': 'a',\n        'ǎ': 'a',\n        'â': 'a',\n        'ấ': 'a',\n        'ậ': 'a',\n        'ầ': 'a',\n        'ẩ': 'a',\n        'ẫ': 'a',\n        'ä': 'a',\n        'ǟ': 'a',\n        'ȧ': 'a',\n        'ǡ': 'a',\n        'ạ': 'a',\n        'ȁ': 'a',\n        'à': 'a',\n        'ả': 'a',\n        'ȃ': 'a',\n        'ā': 'a',\n        'ą': 'a',\n        'ᶏ': 'a',\n        'ẚ': 'a',\n        'å': 'a',\n        'ǻ': 'a',\n        'ḁ': 'a',\n        'ⱥ': 'a',\n        'ã': 'a',\n        'ꜳ': 'aa',\n        'æ': 'ae',\n        'ǽ': 'ae',\n        'ǣ': 'ae',\n        'ꜵ': 'ao',\n        'ꜷ': 'au',\n        'ꜹ': 'av',\n        'ꜻ': 'av',\n        'ꜽ': 'ay',\n        'ḃ': 'b',\n        'ḅ': 'b',\n        'ɓ': 'b',\n        'ḇ': 'b',\n        'ᵬ': 'b',\n        'ᶀ': 'b',\n        'ƀ': 'b',\n        'ƃ': 'b',\n        'ɵ': 'o',\n        'ć': 'c',\n        'č': 'c',\n        'ç': 'c',\n        'ḉ': 'c',\n        'ĉ': 'c',\n        'ɕ': 'c',\n        'ċ': 'c',\n        'ƈ': 'c',\n        'ȼ': 'c',\n        'ď': 'd',\n        'ḑ': 'd',\n        'ḓ': 'd',\n        'ȡ': 'd',\n        'ḋ': 'd',\n        'ḍ': 'd',\n        'ɗ': 'd',\n        'ᶑ': 'd',\n        'ḏ': 'd',\n        'ᵭ': 'd',\n        'ᶁ': 'd',\n        'đ': 'd',\n        'ɖ': 'd',\n        'ƌ': 'd',\n        'ı': 'i',\n        'ȷ': 'j',\n        'ɟ': 'j',\n        'ʄ': 'j',\n        'ǳ': 'dz',\n        'ǆ': 'dz',\n        'é': 'e',\n        'ĕ': 'e',\n        'ě': 'e',\n        'ȩ': 'e',\n        'ḝ': 'e',\n        'ê': 'e',\n        'ế': 'e',\n        'ệ': 'e',\n        'ề': 'e',\n        'ể': 'e',\n        'ễ': 'e',\n        'ḙ': 'e',\n        'ë': 'e',\n        'ė': 'e',\n        'ẹ': 'e',\n        'ȅ': 'e',\n        'è': 'e',\n        'ẻ': 'e',\n        'ȇ': 'e',\n        'ē': 'e',\n        'ḗ': 'e',\n        'ḕ': 'e',\n        'ⱸ': 'e',\n        'ę': 'e',\n        'ᶒ': 'e',\n        'ɇ': 'e',\n        'ẽ': 'e',\n        'ḛ': 'e',\n        'ꝫ': 'et',\n        'ḟ': 'f',\n        'ƒ': 'f',\n        'ᵮ': 'f',\n        'ᶂ': 'f',\n        'ǵ': 'g',\n        'ğ': 'g',\n        'ǧ': 'g',\n        'ģ': 'g',\n        'ĝ': 'g',\n        'ġ': 'g',\n        'ɠ': 'g',\n        'ḡ': 'g',\n        'ᶃ': 'g',\n        'ǥ': 'g',\n        'ḫ': 'h',\n        'ȟ': 'h',\n        'ḩ': 'h',\n        'ĥ': 'h',\n        'ⱨ': 'h',\n        'ḧ': 'h',\n        'ḣ': 'h',\n        'ḥ': 'h',\n        'ɦ': 'h',\n        'ẖ': 'h',\n        'ħ': 'h',\n        'ƕ': 'hv',\n        'í': 'i',\n        'ĭ': 'i',\n        'ǐ': 'i',\n        'î': 'i',\n        'ï': 'i',\n        'ḯ': 'i',\n        'ị': 'i',\n        'ȉ': 'i',\n        'ì': 'i',\n        'ỉ': 'i',\n        'ȋ': 'i',\n        'ī': 'i',\n        'į': 'i',\n        'ᶖ': 'i',\n        'ɨ': 'i',\n        'ĩ': 'i',\n        'ḭ': 'i',\n        'ꝺ': 'd',\n        'ꝼ': 'f',\n        'ᵹ': 'g',\n        'ꞃ': 'r',\n        'ꞅ': 's',\n        'ꞇ': 't',\n        'ꝭ': 'is',\n        'ǰ': 'j',\n        'ĵ': 'j',\n        'ʝ': 'j',\n        'ɉ': 'j',\n        'ḱ': 'k',\n        'ǩ': 'k',\n        'ķ': 'k',\n        'ⱪ': 'k',\n        'ꝃ': 'k',\n        'ḳ': 'k',\n        'ƙ': 'k',\n        'ḵ': 'k',\n        'ᶄ': 'k',\n        'ꝁ': 'k',\n        'ꝅ': 'k',\n        'ĺ': 'l',\n        'ƚ': 'l',\n        'ɬ': 'l',\n        'ľ': 'l',\n        'ļ': 'l',\n        'ḽ': 'l',\n        'ȴ': 'l',\n        'ḷ': 'l',\n        'ḹ': 'l',\n        'ⱡ': 'l',\n        'ꝉ': 'l',\n        'ḻ': 'l',\n        'ŀ': 'l',\n        'ɫ': 'l',\n        'ᶅ': 'l',\n        'ɭ': 'l',\n        'ł': 'l',\n        'ǉ': 'lj',\n        'ſ': 's',\n        'ẜ': 's',\n        'ẛ': 's',\n        'ẝ': 's',\n        'ḿ': 'm',\n        'ṁ': 'm',\n        'ṃ': 'm',\n        'ɱ': 'm',\n        'ᵯ': 'm',\n        'ᶆ': 'm',\n        'ń': 'n',\n        'ň': 'n',\n        'ņ': 'n',\n        'ṋ': 'n',\n        'ȵ': 'n',\n        'ṅ': 'n',\n        'ṇ': 'n',\n        'ǹ': 'n',\n        'ɲ': 'n',\n        'ṉ': 'n',\n        'ƞ': 'n',\n        'ᵰ': 'n',\n        'ᶇ': 'n',\n        'ɳ': 'n',\n        'ñ': 'n',\n        'ǌ': 'nj',\n        'ó': 'o',\n        'ŏ': 'o',\n        'ǒ': 'o',\n        'ô': 'o',\n        'ố': 'o',\n        'ộ': 'o',\n        'ồ': 'o',\n        'ổ': 'o',\n        'ỗ': 'o',\n        'ö': 'o',\n        'ȫ': 'o',\n        'ȯ': 'o',\n        'ȱ': 'o',\n        'ọ': 'o',\n        'ő': 'o',\n        'ȍ': 'o',\n        'ò': 'o',\n        'ỏ': 'o',\n        'ơ': 'o',\n        'ớ': 'o',\n        'ợ': 'o',\n        'ờ': 'o',\n        'ở': 'o',\n        'ỡ': 'o',\n        'ȏ': 'o',\n        'ꝋ': 'o',\n        'ꝍ': 'o',\n        'ⱺ': 'o',\n        'ō': 'o',\n        'ṓ': 'o',\n        'ṑ': 'o',\n        'ǫ': 'o',\n        'ǭ': 'o',\n        'ø': 'o',\n        'ǿ': 'o',\n        'õ': 'o',\n        'ṍ': 'o',\n        'ṏ': 'o',\n        'ȭ': 'o',\n        'ƣ': 'oi',\n        'ꝏ': 'oo',\n        'ɛ': 'e',\n        'ᶓ': 'e',\n        'ɔ': 'o',\n        'ᶗ': 'o',\n        'ȣ': 'ou',\n        'ṕ': 'p',\n        'ṗ': 'p',\n        'ꝓ': 'p',\n        'ƥ': 'p',\n        'ᵱ': 'p',\n        'ᶈ': 'p',\n        'ꝕ': 'p',\n        'ᵽ': 'p',\n        'ꝑ': 'p',\n        'ꝙ': 'q',\n        'ʠ': 'q',\n        'ɋ': 'q',\n        'ꝗ': 'q',\n        'ŕ': 'r',\n        'ř': 'r',\n        'ŗ': 'r',\n        'ṙ': 'r',\n        'ṛ': 'r',\n        'ṝ': 'r',\n        'ȑ': 'r',\n        'ɾ': 'r',\n        'ᵳ': 'r',\n        'ȓ': 'r',\n        'ṟ': 'r',\n        'ɼ': 'r',\n        'ᵲ': 'r',\n        'ᶉ': 'r',\n        'ɍ': 'r',\n        'ɽ': 'r',\n        'ↄ': 'c',\n        'ꜿ': 'c',\n        'ɘ': 'e',\n        'ɿ': 'r',\n        'ś': 's',\n        'ṥ': 's',\n        'š': 's',\n        'ṧ': 's',\n        'ş': 's',\n        'ŝ': 's',\n        'ș': 's',\n        'ṡ': 's',\n        'ṣ': 's',\n        'ṩ': 's',\n        'ʂ': 's',\n        'ᵴ': 's',\n        'ᶊ': 's',\n        'ȿ': 's',\n        'ɡ': 'g',\n        'ß': 'ss',\n        'ᴑ': 'o',\n        'ᴓ': 'o',\n        'ᴝ': 'u',\n        'ť': 't',\n        'ţ': 't',\n        'ṱ': 't',\n        'ț': 't',\n        'ȶ': 't',\n        'ẗ': 't',\n        'ⱦ': 't',\n        'ṫ': 't',\n        'ṭ': 't',\n        'ƭ': 't',\n        'ṯ': 't',\n        'ᵵ': 't',\n        'ƫ': 't',\n        'ʈ': 't',\n        'ŧ': 't',\n        'ᵺ': 'th',\n        'ɐ': 'a',\n        'ᴂ': 'ae',\n        'ǝ': 'e',\n        'ᵷ': 'g',\n        'ɥ': 'h',\n        'ʮ': 'h',\n        'ʯ': 'h',\n        'ᴉ': 'i',\n        'ʞ': 'k',\n        'ꞁ': 'l',\n        'ɯ': 'm',\n        'ɰ': 'm',\n        'ᴔ': 'oe',\n        'ɹ': 'r',\n        'ɻ': 'r',\n        'ɺ': 'r',\n        'ⱹ': 'r',\n        'ʇ': 't',\n        'ʌ': 'v',\n        'ʍ': 'w',\n        'ʎ': 'y',\n        'ꜩ': 'tz',\n        'ú': 'u',\n        'ŭ': 'u',\n        'ǔ': 'u',\n        'û': 'u',\n        'ṷ': 'u',\n        'ü': 'u',\n        'ǘ': 'u',\n        'ǚ': 'u',\n        'ǜ': 'u',\n        'ǖ': 'u',\n        'ṳ': 'u',\n        'ụ': 'u',\n        'ű': 'u',\n        'ȕ': 'u',\n        'ù': 'u',\n        'ủ': 'u',\n        'ư': 'u',\n        'ứ': 'u',\n        'ự': 'u',\n        'ừ': 'u',\n        'ử': 'u',\n        'ữ': 'u',\n        'ȗ': 'u',\n        'ū': 'u',\n        'ṻ': 'u',\n        'ų': 'u',\n        'ᶙ': 'u',\n        'ů': 'u',\n        'ũ': 'u',\n        'ṹ': 'u',\n        'ṵ': 'u',\n        'ᵫ': 'ue',\n        'ꝸ': 'um',\n        'ⱴ': 'v',\n        'ꝟ': 'v',\n        'ṿ': 'v',\n        'ʋ': 'v',\n        'ᶌ': 'v',\n        'ⱱ': 'v',\n        'ṽ': 'v',\n        'ꝡ': 'vy',\n        'ẃ': 'w',\n        'ŵ': 'w',\n        'ẅ': 'w',\n        'ẇ': 'w',\n        'ẉ': 'w',\n        'ẁ': 'w',\n        'ⱳ': 'w',\n        'ẘ': 'w',\n        'ẍ': 'x',\n        'ẋ': 'x',\n        'ᶍ': 'x',\n        'ý': 'y',\n        'ŷ': 'y',\n        'ÿ': 'y',\n        'ẏ': 'y',\n        'ỵ': 'y',\n        'ỳ': 'y',\n        'ƴ': 'y',\n        'ỷ': 'y',\n        'ỿ': 'y',\n        'ȳ': 'y',\n        'ẙ': 'y',\n        'ɏ': 'y',\n        'ỹ': 'y',\n        'ź': 'z',\n        'ž': 'z',\n        'ẑ': 'z',\n        'ʑ': 'z',\n        'ⱬ': 'z',\n        'ż': 'z',\n        'ẓ': 'z',\n        'ȥ': 'z',\n        'ẕ': 'z',\n        'ᵶ': 'z',\n        'ᶎ': 'z',\n        'ʐ': 'z',\n        'ƶ': 'z',\n        'ɀ': 'z',\n        'ﬀ': 'ff',\n        'ﬃ': 'ffi',\n        'ﬄ': 'ffl',\n        'ﬁ': 'fi',\n        'ﬂ': 'fl',\n        'ĳ': 'ij',\n        'œ': 'oe',\n        'ﬆ': 'st',\n        'ₐ': 'a',\n        'ₑ': 'e',\n        'ᵢ': 'i',\n        'ⱼ': 'j',\n        'ₒ': 'o',\n        'ᵣ': 'r',\n        'ᵤ': 'u',\n        'ᵥ': 'v',\n        'ₓ': 'x'\n      };\n    }\n    transform(text, chars = '\\\\s') {\n      return isString(text) ? text.replace(/[^A-Za-z0-9]/g, key => {\n        return this.latinMap[key] || key;\n      }) : text;\n    }\n  }\n  LatinisePipe.ɵfac = function LatinisePipe_Factory(t) {\n    return new (t || LatinisePipe)();\n  };\n  LatinisePipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"latinise\",\n    type: LatinisePipe,\n    pure: true\n  });\n  return LatinisePipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet LinesPipe = /*#__PURE__*/(() => {\n  class LinesPipe {\n    transform(text, chars = '\\\\s') {\n      return isString(text) ? text.replace(/\\r\\n/g, '\\n').split('\\n') : text;\n    }\n  }\n  LinesPipe.ɵfac = function LinesPipe_Factory(t) {\n    return new (t || LinesPipe)();\n  };\n  LinesPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"lines\",\n    type: LinesPipe,\n    pure: true\n  });\n  return LinesPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet UnderscorePipe = /*#__PURE__*/(() => {\n  class UnderscorePipe {\n    transform(text, chars = '\\\\s') {\n      return isString(text) ? text.trim().replace(/\\s+/g, '').replace(/[A-Z]/g, (c, k) => {\n        return k ? `_${c.toLowerCase()}` : c.toLowerCase();\n      }) : text;\n    }\n  }\n  UnderscorePipe.ɵfac = function UnderscorePipe_Factory(t) {\n    return new (t || UnderscorePipe)();\n  };\n  UnderscorePipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"underscore\",\n    type: UnderscorePipe,\n    pure: true\n  });\n  return UnderscorePipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MatchPipe = /*#__PURE__*/(() => {\n  class MatchPipe {\n    transform(text, pattern, flags) {\n      if (!isString(text)) {\n        return text;\n      }\n      return text.match(new RegExp(pattern, flags));\n    }\n  }\n  MatchPipe.ɵfac = function MatchPipe_Factory(t) {\n    return new (t || MatchPipe)();\n  };\n  MatchPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"match\",\n    type: MatchPipe,\n    pure: true\n  });\n  return MatchPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TestPipe = /*#__PURE__*/(() => {\n  class TestPipe {\n    transform(text, pattern, flags) {\n      if (!isString(text)) {\n        return text;\n      }\n      return new RegExp(pattern, flags).test(text);\n    }\n  }\n  TestPipe.ɵfac = function TestPipe_Factory(t) {\n    return new (t || TestPipe)();\n  };\n  TestPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"test\",\n    type: TestPipe,\n    pure: true\n  });\n  return TestPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet LeftPadPipe = /*#__PURE__*/(() => {\n  class LeftPadPipe {\n    transform(str, length, padCharacter = ' ') {\n      if (!isString(str) || str.length >= length) {\n        return str;\n      }\n      while (str.length < length) {\n        str = padCharacter + str;\n      }\n      return str;\n    }\n  }\n  LeftPadPipe.ɵfac = function LeftPadPipe_Factory(t) {\n    return new (t || LeftPadPipe)();\n  };\n  LeftPadPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"lpad\",\n    type: LeftPadPipe,\n    pure: true\n  });\n  return LeftPadPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet RightPadPipe = /*#__PURE__*/(() => {\n  class RightPadPipe {\n    transform(str, length = 1, padCharacter = ' ') {\n      if (!isString(str) || str.length >= length) {\n        return str;\n      }\n      while (str.length < length) {\n        str = str + padCharacter;\n      }\n      return str;\n    }\n  }\n  RightPadPipe.ɵfac = function RightPadPipe_Factory(t) {\n    return new (t || RightPadPipe)();\n  };\n  RightPadPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"rpad\",\n    type: RightPadPipe,\n    pure: true\n  });\n  return RightPadPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Takes a singular entity string and pluralizes it.\n * Uses both naive and holdout-list approaches.\n * If several words appear in the string, only the last word is pluralized -- this\n * means that if \"your story\" was passed in, \"your stories\" would be passed out.\n *\n * @param {string} singularEntity - Entity to pluralize. Pass as a singular ('story' or 'house').\n *          NOTE: The last word is examined. So you can pass in e.g. 'my story'.\n * @param {number} [quantity=0] quantity - How many of the entity are there? If left blank, this will\n *          pluralize the string (e.g. 'story' -> 'stories', 'house' -> 'houses'). If given a value,\n *          this will pluralize appropriately (e.g. ('story', 1) -> 'story', ('story', 2) -> 'stories').\n */\nlet MakePluralStringPipe = /*#__PURE__*/(() => {\n  class MakePluralStringPipe {\n    constructor() {\n      this.irregularMap = {\n        addendum: 'addenda',\n        alga: 'algae',\n        alumna: 'alumnae',\n        alumnus: 'alumni',\n        analysis: 'analyses',\n        antenna: 'antennae',\n        appendix: 'appendices',\n        aquarium: 'aquaria',\n        arch: 'arches',\n        axe: 'axes',\n        axis: 'axes',\n        bacillus: 'bacilli',\n        bacterium: 'bacteria',\n        basis: 'bases',\n        batch: 'batches',\n        beach: 'beaches',\n        beau: 'beaux',\n        bison: 'bison',\n        brush: 'brushes',\n        buffalo: 'buffaloes',\n        bureau: 'bureaus',\n        bus: 'busses',\n        cactus: 'cacti',\n        calf: 'calves',\n        chateau: 'chateaux',\n        cherry: 'cherries',\n        child: 'children',\n        church: 'churches',\n        circus: 'circuses',\n        cod: 'cod',\n        corps: 'corps',\n        corpus: 'corpora',\n        crisis: 'crises',\n        criterion: 'criteria',\n        curriculum: 'curricula',\n        datum: 'data',\n        deer: 'deer',\n        diagnosis: 'diagnoses',\n        die: 'dice',\n        domino: 'dominoes',\n        dwarf: 'dwarves',\n        echo: 'echoes',\n        elf: 'elves',\n        ellipsis: 'ellipses',\n        embargo: 'embargoes',\n        emphasis: 'emphases',\n        erratum: 'errata',\n        fax: 'faxes',\n        fireman: 'firemen',\n        fish: 'fish',\n        flush: 'flushes',\n        focus: 'foci',\n        foot: 'feet',\n        formula: 'formulas',\n        fungus: 'fungi',\n        genus: 'genera',\n        goose: 'geese',\n        grafito: 'grafiti',\n        half: 'halves',\n        hero: 'heroes',\n        hoax: 'hoaxes',\n        hoof: 'hooves',\n        hypothesis: 'hypotheses',\n        index: 'indices',\n        kiss: 'kisses',\n        knife: 'knives',\n        leaf: 'leaves',\n        life: 'lives',\n        loaf: 'loaves',\n        louse: 'lice',\n        man: 'men',\n        mango: 'mangoes',\n        matrix: 'matrices',\n        means: 'means',\n        medium: 'media',\n        memorandum: 'memoranda',\n        millennium: 'milennia',\n        moose: 'moose',\n        mosquito: 'mosquitoes',\n        motto: 'mottoes',\n        mouse: 'mice',\n        nebula: 'nebulae',\n        neurosis: 'neuroses',\n        nucleus: 'nuclei',\n        oasis: 'oases',\n        octopus: 'octopodes',\n        ovum: 'ova',\n        ox: 'oxen',\n        paralysis: 'paralyses',\n        parenthesis: 'parentheses',\n        person: 'people',\n        phenomenon: 'phenomena',\n        plateau: 'plateaux',\n        potato: 'potatoes',\n        quiz: 'quizzes',\n        radius: 'radii',\n        reflex: 'reflexes',\n        'runner-up': 'runners-up',\n        scampo: 'scampi',\n        scarf: 'scarves',\n        scissors: 'scissors',\n        scratch: 'scratches',\n        self: 'selves',\n        series: 'series',\n        sheaf: 'sheaves',\n        sheep: 'sheep',\n        shelf: 'shelves',\n        'son-in-law': 'sons-in-law',\n        species: 'species',\n        splash: 'splashes',\n        stimulus: 'stimuli',\n        stitch: 'stitches',\n        stratum: 'strata',\n        syllabus: 'syllabi',\n        symposium: 'symposia',\n        synopsis: 'synopses',\n        synthesis: 'syntheses',\n        tableau: 'tableaux',\n        tax: 'taxes',\n        that: 'those',\n        thesis: 'theses',\n        thief: 'thieves',\n        this: 'these',\n        tomato: 'tomatoes',\n        tooth: 'teeth',\n        tornado: 'tornadoes',\n        torpedo: 'torpedoes',\n        vertebra: 'vertebrae',\n        veto: 'vetoes',\n        vita: 'vitae',\n        volcano: 'volcanoes',\n        waltz: 'waltzes',\n        wash: 'washes',\n        watch: 'watches',\n        wharf: 'wharves',\n        wife: 'wives',\n        wolf: 'wolves',\n        woman: 'women',\n        zero: 'zeroes'\n      };\n    }\n    transform(singularEntity, quantity = 0) {\n      if (!singularEntity || singularEntity === '') {\n        return '';\n      }\n      if (quantity === 1) {\n        return singularEntity;\n      } else {\n        const lastWord = singularEntity.trim().split(' ')[singularEntity.trim().split(' ').length - 1];\n        if (this.irregularMap[lastWord.toLocaleLowerCase()]) {\n          if (lastWord[0] === lastWord[0].toLocaleUpperCase()) {\n            return singularEntity.replace(lastWord, this.irregularMap[lastWord.toLocaleLowerCase()].replace(this.irregularMap[lastWord.toLocaleLowerCase()][0], this.irregularMap[lastWord.toLocaleLowerCase()][0].toLocaleUpperCase()));\n          }\n          return singularEntity.replace(lastWord, this.irregularMap[lastWord.toLocaleLowerCase()]);\n        } else if (lastWord[lastWord.length - 1] === 'y') {\n          // Naive approach:\n          // consonant+y = word - 'y' +'ies'\n          // vowel+y = word + 's'\n          return isVowel(lastWord[lastWord.length - 2]) ? singularEntity + 's' : singularEntity.replace(lastWord, lastWord.slice(0, -1) + 'ies');\n        } else if (lastWord[lastWord.length - 1] === 's') {\n          return singularEntity + 'es';\n        } else {\n          return singularEntity + 's';\n        }\n      }\n    }\n  }\n  MakePluralStringPipe.ɵfac = function MakePluralStringPipe_Factory(t) {\n    return new (t || MakePluralStringPipe)();\n  };\n  MakePluralStringPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"makePluralString\",\n    type: MakePluralStringPipe,\n    pure: true\n  });\n  return MakePluralStringPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet WrapPipe = /*#__PURE__*/(() => {\n  class WrapPipe {\n    transform(str, prefix = '', suffix = '') {\n      if (!isString(str)) {\n        return str;\n      }\n      return (!!prefix && isString(prefix) ? prefix : '') + str + (!!suffix && isString(suffix) ? suffix : '');\n    }\n  }\n  WrapPipe.ɵfac = function WrapPipe_Factory(t) {\n    return new (t || WrapPipe)();\n  };\n  WrapPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"wrap\",\n    type: WrapPipe,\n    pure: true\n  });\n  return WrapPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst STRING_PIPES = [AorAnPipe, LeftTrimPipe, RepeatPipe, RightTrimPipe, ScanPipe, ShortenPipe, StripTagsPipe, TrimPipe, UcFirstPipe, UcWordsPipe, SlugifyPipe, CamelizePipe, LatinisePipe, LinesPipe, UnderscorePipe, MatchPipe, TestPipe, LeftPadPipe, RightPadPipe, MakePluralStringPipe, WrapPipe];\nlet NgStringPipesModule = /*#__PURE__*/(() => {\n  class NgStringPipesModule {}\n  NgStringPipesModule.ɵfac = function NgStringPipesModule_Factory(t) {\n    return new (t || NgStringPipesModule)();\n  };\n  NgStringPipesModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgStringPipesModule\n  });\n  NgStringPipesModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return NgStringPipesModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MaxPipe = /*#__PURE__*/(() => {\n  class MaxPipe {\n    transform(arr) {\n      return Array.isArray(arr) ? Math.max(...arr) : arr;\n    }\n  }\n  MaxPipe.ɵfac = function MaxPipe_Factory(t) {\n    return new (t || MaxPipe)();\n  };\n  MaxPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"max\",\n    type: MaxPipe,\n    pure: true\n  });\n  return MaxPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MinPipe = /*#__PURE__*/(() => {\n  class MinPipe {\n    transform(arr) {\n      return Array.isArray(arr) ? Math.min(...arr) : arr;\n    }\n  }\n  MinPipe.ɵfac = function MinPipe_Factory(t) {\n    return new (t || MinPipe)();\n  };\n  MinPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"min\",\n    type: MinPipe,\n    pure: true\n  });\n  return MinPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet PercentagePipe = /*#__PURE__*/(() => {\n  class PercentagePipe {\n    transform(num, total = 100, floor = false) {\n      if (isNaN(num)) {\n        return num;\n      }\n      const percent = num * 100 / total;\n      return floor ? Math.floor(percent) : percent;\n    }\n  }\n  PercentagePipe.ɵfac = function PercentagePipe_Factory(t) {\n    return new (t || PercentagePipe)();\n  };\n  PercentagePipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"percentage\",\n    type: PercentagePipe,\n    pure: true\n  });\n  return PercentagePipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet SumPipe = /*#__PURE__*/(() => {\n  class SumPipe {\n    transform(arr) {\n      return Array.isArray(arr) ? arr.reduce((sum, curr) => sum + curr, 0) : arr;\n    }\n  }\n  SumPipe.ɵfac = function SumPipe_Factory(t) {\n    return new (t || SumPipe)();\n  };\n  SumPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"sum\",\n    type: SumPipe,\n    pure: true\n  });\n  return SumPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet FloorPipe = /*#__PURE__*/(() => {\n  class FloorPipe {\n    transform(num, precision = 0) {\n      if (precision <= 0) {\n        return Math.floor(num);\n      }\n      const tho = 10 ** precision;\n      return Math.floor(num * tho) / tho;\n    }\n  }\n  FloorPipe.ɵfac = function FloorPipe_Factory(t) {\n    return new (t || FloorPipe)();\n  };\n  FloorPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"floor\",\n    type: FloorPipe,\n    pure: true\n  });\n  return FloorPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet RoundPipe = /*#__PURE__*/(() => {\n  class RoundPipe {\n    transform(num, precision = 0) {\n      return applyPrecision(num, precision);\n    }\n  }\n  RoundPipe.ɵfac = function RoundPipe_Factory(t) {\n    return new (t || RoundPipe)();\n  };\n  RoundPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"round\",\n    type: RoundPipe,\n    pure: true\n  });\n  return RoundPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet SqrtPipe = /*#__PURE__*/(() => {\n  class SqrtPipe {\n    transform(num) {\n      return !isNaN(num) ? Math.sqrt(num) : num;\n    }\n  }\n  SqrtPipe.ɵfac = function SqrtPipe_Factory(t) {\n    return new (t || SqrtPipe)();\n  };\n  SqrtPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"sqrt\",\n    type: SqrtPipe,\n    pure: true\n  });\n  return SqrtPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet PowerPipe = /*#__PURE__*/(() => {\n  class PowerPipe {\n    transform(num, power = 2) {\n      return !isNaN(num) ? num ** power : num;\n    }\n  }\n  PowerPipe.ɵfac = function PowerPipe_Factory(t) {\n    return new (t || PowerPipe)();\n  };\n  PowerPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"pow\",\n    type: PowerPipe,\n    pure: true\n  });\n  return PowerPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet CeilPipe = /*#__PURE__*/(() => {\n  class CeilPipe {\n    transform(num, precision = 0) {\n      if (precision <= 0) {\n        return Math.ceil(num);\n      }\n      const tho = 10 ** precision;\n      return Math.ceil(num * tho) / tho;\n    }\n  }\n  CeilPipe.ɵfac = function CeilPipe_Factory(t) {\n    return new (t || CeilPipe)();\n  };\n  CeilPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"ceil\",\n    type: CeilPipe,\n    pure: true\n  });\n  return CeilPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet DegreesPipe = /*#__PURE__*/(() => {\n  class DegreesPipe {\n    transform(radians) {\n      if (!isNumberFinite(radians)) {\n        return NaN;\n      }\n      return radians * 180 / Math.PI;\n    }\n  }\n  DegreesPipe.ɵfac = function DegreesPipe_Factory(t) {\n    return new (t || DegreesPipe)();\n  };\n  DegreesPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"degrees\",\n    type: DegreesPipe,\n    pure: true\n  });\n  return DegreesPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet BytesPipe = /*#__PURE__*/(() => {\n  class BytesPipe {\n    constructor() {\n      this.dictionary = [{\n        max: 1024,\n        type: 'B'\n      }, {\n        max: 1048576,\n        type: 'KB'\n      }, {\n        max: 1073741824,\n        type: 'MB'\n      }, {\n        max: 1.0995116e12,\n        type: 'GB'\n      }];\n    }\n    transform(value, precision) {\n      if (!isNumberFinite(value)) {\n        return NaN;\n      }\n      const format = this.dictionary.find(d => value < d.max) || this.dictionary[this.dictionary.length - 1];\n      const calc = value / (format.max / 1024);\n      const num = isUndefined(precision) ? calc : applyPrecision(calc, precision);\n      return `${num} ${format.type}`;\n    }\n  }\n  BytesPipe.ɵfac = function BytesPipe_Factory(t) {\n    return new (t || BytesPipe)();\n  };\n  BytesPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"bytes\",\n    type: BytesPipe,\n    pure: true\n  });\n  return BytesPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet RadiansPipe = /*#__PURE__*/(() => {\n  class RadiansPipe {\n    transform(degrees) {\n      if (!isNumberFinite(degrees)) {\n        return NaN;\n      }\n      return degrees * Math.PI / 180;\n    }\n  }\n  RadiansPipe.ɵfac = function RadiansPipe_Factory(t) {\n    return new (t || RadiansPipe)();\n  };\n  RadiansPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"radians\",\n    type: RadiansPipe,\n    pure: true\n  });\n  return RadiansPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst MATH_PIPES = [MaxPipe, MinPipe, PercentagePipe, SumPipe, FloorPipe, RoundPipe, SqrtPipe, PowerPipe, CeilPipe, DegreesPipe, BytesPipe, RadiansPipe];\nlet NgMathPipesModule = /*#__PURE__*/(() => {\n  class NgMathPipesModule {}\n  NgMathPipesModule.ɵfac = function NgMathPipesModule_Factory(t) {\n    return new (t || NgMathPipesModule)();\n  };\n  NgMathPipesModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgMathPipesModule\n  });\n  NgMathPipesModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return NgMathPipesModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet IsDefinedPipe = /*#__PURE__*/(() => {\n  class IsDefinedPipe {\n    transform(input) {\n      return !isUndefined(input);\n    }\n  }\n  IsDefinedPipe.ɵfac = function IsDefinedPipe_Factory(t) {\n    return new (t || IsDefinedPipe)();\n  };\n  IsDefinedPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"isDefined\",\n    type: IsDefinedPipe,\n    pure: true\n  });\n  return IsDefinedPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet IsNullPipe = /*#__PURE__*/(() => {\n  class IsNullPipe {\n    transform(input) {\n      return input === null;\n    }\n  }\n  IsNullPipe.ɵfac = function IsNullPipe_Factory(t) {\n    return new (t || IsNullPipe)();\n  };\n  IsNullPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"isNull\",\n    type: IsNullPipe,\n    pure: true\n  });\n  return IsNullPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet IsUndefinedPipe = /*#__PURE__*/(() => {\n  class IsUndefinedPipe {\n    transform(input) {\n      return isUndefined(input);\n    }\n  }\n  IsUndefinedPipe.ɵfac = function IsUndefinedPipe_Factory(t) {\n    return new (t || IsUndefinedPipe)();\n  };\n  IsUndefinedPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"isUndefined\",\n    type: IsUndefinedPipe,\n    pure: true\n  });\n  return IsUndefinedPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet IsStringPipe = /*#__PURE__*/(() => {\n  class IsStringPipe {\n    transform(input) {\n      return isString(input);\n    }\n  }\n  IsStringPipe.ɵfac = function IsStringPipe_Factory(t) {\n    return new (t || IsStringPipe)();\n  };\n  IsStringPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"isString\",\n    type: IsStringPipe,\n    pure: true\n  });\n  return IsStringPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet IsFunctionPipe = /*#__PURE__*/(() => {\n  class IsFunctionPipe {\n    transform(input) {\n      return isFunction(input);\n    }\n  }\n  IsFunctionPipe.ɵfac = function IsFunctionPipe_Factory(t) {\n    return new (t || IsFunctionPipe)();\n  };\n  IsFunctionPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"isFunction\",\n    type: IsFunctionPipe,\n    pure: true\n  });\n  return IsFunctionPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet IsNumberPipe = /*#__PURE__*/(() => {\n  class IsNumberPipe {\n    transform(input) {\n      return isNumber(input);\n    }\n  }\n  IsNumberPipe.ɵfac = function IsNumberPipe_Factory(t) {\n    return new (t || IsNumberPipe)();\n  };\n  IsNumberPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"isNumber\",\n    type: IsNumberPipe,\n    pure: true\n  });\n  return IsNumberPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet IsArrayPipe = /*#__PURE__*/(() => {\n  class IsArrayPipe {\n    transform(input) {\n      return Array.isArray(input);\n    }\n  }\n  IsArrayPipe.ɵfac = function IsArrayPipe_Factory(t) {\n    return new (t || IsArrayPipe)();\n  };\n  IsArrayPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"isArray\",\n    type: IsArrayPipe,\n    pure: true\n  });\n  return IsArrayPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet IsObjectPipe = /*#__PURE__*/(() => {\n  class IsObjectPipe {\n    transform(input) {\n      return isObject(input);\n    }\n  }\n  IsObjectPipe.ɵfac = function IsObjectPipe_Factory(t) {\n    return new (t || IsObjectPipe)();\n  };\n  IsObjectPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"isObject\",\n    type: IsObjectPipe,\n    pure: true\n  });\n  return IsObjectPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet IsGreaterEqualThanPipe = /*#__PURE__*/(() => {\n  class IsGreaterEqualThanPipe {\n    transform(input, other) {\n      return input >= other;\n    }\n  }\n  IsGreaterEqualThanPipe.ɵfac = function IsGreaterEqualThanPipe_Factory(t) {\n    return new (t || IsGreaterEqualThanPipe)();\n  };\n  IsGreaterEqualThanPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"isGreaterEqualThan\",\n    type: IsGreaterEqualThanPipe,\n    pure: true\n  });\n  return IsGreaterEqualThanPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet IsGreaterThanPipe = /*#__PURE__*/(() => {\n  class IsGreaterThanPipe {\n    transform(input, other) {\n      return input > other;\n    }\n  }\n  IsGreaterThanPipe.ɵfac = function IsGreaterThanPipe_Factory(t) {\n    return new (t || IsGreaterThanPipe)();\n  };\n  IsGreaterThanPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"isGreaterThan\",\n    type: IsGreaterThanPipe,\n    pure: true\n  });\n  return IsGreaterThanPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet IsLessEqualThanPipe = /*#__PURE__*/(() => {\n  class IsLessEqualThanPipe {\n    transform(input, other) {\n      return input <= other;\n    }\n  }\n  IsLessEqualThanPipe.ɵfac = function IsLessEqualThanPipe_Factory(t) {\n    return new (t || IsLessEqualThanPipe)();\n  };\n  IsLessEqualThanPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"isLessEqualThan\",\n    type: IsLessEqualThanPipe,\n    pure: true\n  });\n  return IsLessEqualThanPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet IsEqualToPipe = /*#__PURE__*/(() => {\n  class IsEqualToPipe {\n    transform(input, other) {\n      // tslint:disable-next-line:triple-equals\n      return input == other;\n    }\n  }\n  IsEqualToPipe.ɵfac = function IsEqualToPipe_Factory(t) {\n    return new (t || IsEqualToPipe)();\n  };\n  IsEqualToPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"isEqualTo\",\n    type: IsEqualToPipe,\n    pure: true\n  });\n  return IsEqualToPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet IsNotEqualToPipe = /*#__PURE__*/(() => {\n  class IsNotEqualToPipe {\n    transform(input, other) {\n      // tslint:disable-next-line:triple-equals\n      return input != other;\n    }\n  }\n  IsNotEqualToPipe.ɵfac = function IsNotEqualToPipe_Factory(t) {\n    return new (t || IsNotEqualToPipe)();\n  };\n  IsNotEqualToPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"isNotEqualTo\",\n    type: IsNotEqualToPipe,\n    pure: true\n  });\n  return IsNotEqualToPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet IsIdenticalToPipe = /*#__PURE__*/(() => {\n  class IsIdenticalToPipe {\n    transform(input, other) {\n      return input === other;\n    }\n  }\n  IsIdenticalToPipe.ɵfac = function IsIdenticalToPipe_Factory(t) {\n    return new (t || IsIdenticalToPipe)();\n  };\n  IsIdenticalToPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"isIdenticalTo\",\n    type: IsIdenticalToPipe,\n    pure: true\n  });\n  return IsIdenticalToPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet IsNotIdenticalToPipe = /*#__PURE__*/(() => {\n  class IsNotIdenticalToPipe {\n    transform(input, other) {\n      return input !== other;\n    }\n  }\n  IsNotIdenticalToPipe.ɵfac = function IsNotIdenticalToPipe_Factory(t) {\n    return new (t || IsNotIdenticalToPipe)();\n  };\n  IsNotIdenticalToPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"isNotIdenticalTo\",\n    type: IsNotIdenticalToPipe,\n    pure: true\n  });\n  return IsNotIdenticalToPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet IsLessThanPipe = /*#__PURE__*/(() => {\n  class IsLessThanPipe {\n    transform(input, other) {\n      return input < other;\n    }\n  }\n  IsLessThanPipe.ɵfac = function IsLessThanPipe_Factory(t) {\n    return new (t || IsLessThanPipe)();\n  };\n  IsLessThanPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"isLessThan\",\n    type: IsLessThanPipe,\n    pure: true\n  });\n  return IsLessThanPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst BOOLEAN_PIPES = [IsDefinedPipe, IsNullPipe, IsUndefinedPipe, IsStringPipe, IsFunctionPipe, IsNumberPipe, IsArrayPipe, IsObjectPipe, IsGreaterEqualThanPipe, IsGreaterThanPipe, IsLessEqualThanPipe, IsLessEqualThanPipe, IsEqualToPipe, IsNotEqualToPipe, IsIdenticalToPipe, IsNotIdenticalToPipe, IsLessThanPipe];\nlet NgBooleanPipesModule = /*#__PURE__*/(() => {\n  class NgBooleanPipesModule {}\n  NgBooleanPipesModule.ɵfac = function NgBooleanPipesModule_Factory(t) {\n    return new (t || NgBooleanPipesModule)();\n  };\n  NgBooleanPipesModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgBooleanPipesModule\n  });\n  NgBooleanPipesModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return NgBooleanPipesModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TimeAgoPipe = /*#__PURE__*/(() => {\n  class TimeAgoPipe {\n    /**\n     * @param inputDate: Date | Moment - not included as TypeScript interface,\n     * in order to keep `ngx-pipes` \"pure\" from dependencies!\n     */\n    transform(inputDate) {\n      if (!inputDate || !inputDate.getTime && !inputDate.toDate) {\n        return 'Invalid date';\n      }\n      const past = inputDate.toDate ? inputDate.toDate() : inputDate.getTime();\n      const now = +new Date();\n      if (past > now) {\n        return 'in the future';\n      }\n      for (let i = 0, l = TimeAgoPipe.MAPPER.length, ms = now - past, div = TimeAgoPipe.YEAR_MS; i < l; ++i) {\n        const elm = TimeAgoPipe.MAPPER[i];\n        const unit = Math.floor(ms / (div /= elm.div));\n        if (unit >= 1) {\n          return unit === 1 ? elm.single : `${unit} ${elm.many} ago`;\n        }\n      }\n      return 'just now';\n    }\n  }\n  TimeAgoPipe.YEAR_MS = 1000 * 60 * 60 * 24 * 7 * 4 * 12;\n  TimeAgoPipe.MAPPER = [{\n    single: 'last year',\n    many: 'years',\n    div: 1\n  }, {\n    single: 'last month',\n    many: 'months',\n    div: 12\n  }, {\n    single: 'last week',\n    many: 'weeks',\n    div: 4\n  }, {\n    single: 'yesterday',\n    many: 'days',\n    div: 7\n  }, {\n    single: 'an hour ago',\n    many: 'hours',\n    div: 24\n  }, {\n    single: 'just now',\n    many: 'minutes',\n    div: 60\n  }];\n  TimeAgoPipe.ɵfac = function TimeAgoPipe_Factory(t) {\n    return new (t || TimeAgoPipe)();\n  };\n  TimeAgoPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"timeAgo\",\n    type: TimeAgoPipe,\n    pure: true\n  });\n  return TimeAgoPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst DATE_PIPES = [TimeAgoPipe];\nlet NgDatePipesModule = /*#__PURE__*/(() => {\n  class NgDatePipesModule {}\n  NgDatePipesModule.ɵfac = function NgDatePipesModule_Factory(t) {\n    return new (t || NgDatePipesModule)();\n  };\n  NgDatePipesModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgDatePipesModule\n  });\n  NgDatePipesModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return NgDatePipesModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet NgPipesModule = /*#__PURE__*/(() => {\n  class NgPipesModule {}\n  NgPipesModule.ɵfac = function NgPipesModule_Factory(t) {\n    return new (t || NgPipesModule)();\n  };\n  NgPipesModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgPipesModule\n  });\n  NgPipesModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [NgArrayPipesModule, NgStringPipesModule, NgMathPipesModule, NgBooleanPipesModule, NgObjectPipesModule, NgDatePipesModule]\n  });\n  return NgPipesModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AorAnPipe, BOOLEAN_PIPES, BytesPipe, CamelizePipe, CeilPipe, ChunkPipe, DATE_PIPES, DegreesPipe, DiffObjPipe, DiffPipe, EveryPipe, FilterByImpurePipe, FilterByPipe, FlattenPipe, FloorPipe, FromPairsPipe, GroupByImpurePipe, GroupByPipe, InitialPipe, IntersectionPipe, InvertByPipe, InvertPipe, IsArrayPipe, IsDefinedPipe, IsEqualToPipe, IsFunctionPipe, IsGreaterEqualThanPipe, IsGreaterThanPipe, IsIdenticalToPipe, IsLessEqualThanPipe, IsLessThanPipe, IsNotEqualToPipe, IsNotIdenticalToPipe, IsNullPipe, IsNumberPipe, IsObjectPipe, IsStringPipe, IsUndefinedPipe, KeysPipe, LatinisePipe, LeftPadPipe, LeftTrimPipe, LinesPipe, MATH_PIPES, MakePluralStringPipe, MatchPipe, MaxPipe, MinPipe, NgArrayPipesModule, NgBooleanPipesModule, NgDatePipesModule, NgMathPipesModule, NgObjectPipesModule, NgPipesModule, NgStringPipesModule, OmitPipe, OrderByImpurePipe, OrderByPipe, PairsPipe, PercentagePipe, PickPipe, PluckPipe, PowerPipe, RadiansPipe, RangePipe, RepeatPipe, ReversePipe, RightPadPipe, RightTrimPipe, RoundPipe, STRING_PIPES, SamplePipe, ScanPipe, ShortenPipe, ShufflePipe, SlugifyPipe, SomePipe, SqrtPipe, StripTagsPipe, SumPipe, TailPipe, TestPipe, TimeAgoPipe, TrimPipe, TrurthifyPipe, UcFirstPipe, UcWordsPipe, UnderscorePipe, UnionPipe, UniquePipe, ValuesPipe, WithoutPipe, WrapPipe };\n//# sourceMappingURL=ngx-pipes.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
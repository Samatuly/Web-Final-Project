import { NgModule } from '@angular/core';
import { IsDefinedPipe } from './is-defined';
import { IsNullPipe } from './is-null';
import { IsUndefinedPipe } from './is-undefined';
import { IsStringPipe } from './is-string';
import { IsFunctionPipe } from './is-function';
import { IsNumberPipe } from './is-number';
import { IsArrayPipe } from './is-array';
import { IsObjectPipe } from './is-object';
import { IsGreaterEqualThanPipe } from './is-greater-equal-than';
import { IsGreaterThanPipe } from './is-greater-than';
import { IsLessEqualThanPipe } from './is-less-equal-than';
import { IsEqualToPipe } from './is-equal-to';
import { IsNotEqualToPipe } from './is-not-equal-to';
import { IsIdenticalToPipe } from './is-identical-to';
import { IsNotIdenticalToPipe } from './is-not-identical-to';
import { IsLessThanPipe } from './is-less-than';
import * as i0 from "@angular/core";
export const BOOLEAN_PIPES = [
    IsDefinedPipe,
    IsNullPipe,
    IsUndefinedPipe,
    IsStringPipe,
    IsFunctionPipe,
    IsNumberPipe,
    IsArrayPipe,
    IsObjectPipe,
    IsGreaterEqualThanPipe,
    IsGreaterThanPipe,
    IsLessEqualThanPipe,
    IsLessEqualThanPipe,
    IsEqualToPipe,
    IsNotEqualToPipe,
    IsIdenticalToPipe,
    IsNotIdenticalToPipe,
    IsLessThanPipe,
];
export class NgBooleanPipesModule {
}
NgBooleanPipesModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: NgBooleanPipesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgBooleanPipesModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.2.12", ngImport: i0, type: NgBooleanPipesModule, declarations: [IsDefinedPipe,
        IsNullPipe,
        IsUndefinedPipe,
        IsStringPipe,
        IsFunctionPipe,
        IsNumberPipe,
        IsArrayPipe,
        IsObjectPipe,
        IsGreaterEqualThanPipe,
        IsGreaterThanPipe,
        IsLessEqualThanPipe,
        IsLessEqualThanPipe,
        IsEqualToPipe,
        IsNotEqualToPipe,
        IsIdenticalToPipe,
        IsNotIdenticalToPipe,
        IsLessThanPipe], exports: [IsDefinedPipe,
        IsNullPipe,
        IsUndefinedPipe,
        IsStringPipe,
        IsFunctionPipe,
        IsNumberPipe,
        IsArrayPipe,
        IsObjectPipe,
        IsGreaterEqualThanPipe,
        IsGreaterThanPipe,
        IsLessEqualThanPipe,
        IsLessEqualThanPipe,
        IsEqualToPipe,
        IsNotEqualToPipe,
        IsIdenticalToPipe,
        IsNotIdenticalToPipe,
        IsLessThanPipe] });
NgBooleanPipesModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: NgBooleanPipesModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: NgBooleanPipesModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: BOOLEAN_PIPES,
                    imports: [],
                    exports: BOOLEAN_PIPES,
                }]
        }] });
export { IsDefinedPipe } from './is-defined';
export { IsNullPipe } from './is-null';
export { IsUndefinedPipe } from './is-undefined';
export { IsStringPipe } from './is-string';
export { IsFunctionPipe } from './is-function';
export { IsNumberPipe } from './is-number';
export { IsArrayPipe } from './is-array';
export { IsObjectPipe } from './is-object';
export { IsGreaterEqualThanPipe } from './is-greater-equal-than';
export { IsGreaterThanPipe } from './is-greater-than';
export { IsLessEqualThanPipe } from './is-less-equal-than';
export { IsEqualToPipe } from './is-equal-to';
export { IsNotEqualToPipe } from './is-not-equal-to';
export { IsIdenticalToPipe } from './is-identical-to';
export { IsNotIdenticalToPipe } from './is-not-identical-to';
export { IsLessThanPipe } from './is-less-than';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbmctcGlwZXMvcGlwZXMvYm9vbGVhbi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDN0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN2QyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDakQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMzQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9DLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN6QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzNELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDckQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUVoRCxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUc7SUFDM0IsYUFBYTtJQUNiLFVBQVU7SUFDVixlQUFlO0lBQ2YsWUFBWTtJQUNaLGNBQWM7SUFDZCxZQUFZO0lBQ1osV0FBVztJQUNYLFlBQVk7SUFDWixzQkFBc0I7SUFDdEIsaUJBQWlCO0lBQ2pCLG1CQUFtQjtJQUNuQixtQkFBbUI7SUFDbkIsYUFBYTtJQUNiLGdCQUFnQjtJQUNoQixpQkFBaUI7SUFDakIsb0JBQW9CO0lBQ3BCLGNBQWM7Q0FDZixDQUFDO0FBT0YsTUFBTSxPQUFPLG9CQUFvQjs7a0hBQXBCLG9CQUFvQjttSEFBcEIsb0JBQW9CLGlCQXhCL0IsYUFBYTtRQUNiLFVBQVU7UUFDVixlQUFlO1FBQ2YsWUFBWTtRQUNaLGNBQWM7UUFDZCxZQUFZO1FBQ1osV0FBVztRQUNYLFlBQVk7UUFDWixzQkFBc0I7UUFDdEIsaUJBQWlCO1FBQ2pCLG1CQUFtQjtRQUNuQixtQkFBbUI7UUFDbkIsYUFBYTtRQUNiLGdCQUFnQjtRQUNoQixpQkFBaUI7UUFDakIsb0JBQW9CO1FBQ3BCLGNBQWMsYUFoQmQsYUFBYTtRQUNiLFVBQVU7UUFDVixlQUFlO1FBQ2YsWUFBWTtRQUNaLGNBQWM7UUFDZCxZQUFZO1FBQ1osV0FBVztRQUNYLFlBQVk7UUFDWixzQkFBc0I7UUFDdEIsaUJBQWlCO1FBQ2pCLG1CQUFtQjtRQUNuQixtQkFBbUI7UUFDbkIsYUFBYTtRQUNiLGdCQUFnQjtRQUNoQixpQkFBaUI7UUFDakIsb0JBQW9CO1FBQ3BCLGNBQWM7bUhBUUgsb0JBQW9COzRGQUFwQixvQkFBb0I7a0JBTGhDLFFBQVE7bUJBQUM7b0JBQ1IsWUFBWSxFQUFFLGFBQWE7b0JBQzNCLE9BQU8sRUFBRSxFQUFFO29CQUNYLE9BQU8sRUFBRSxhQUFhO2lCQUN2Qjs7QUFHRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzdDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDdkMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDM0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMzQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzdELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJc0RlZmluZWRQaXBlIH0gZnJvbSAnLi9pcy1kZWZpbmVkJztcbmltcG9ydCB7IElzTnVsbFBpcGUgfSBmcm9tICcuL2lzLW51bGwnO1xuaW1wb3J0IHsgSXNVbmRlZmluZWRQaXBlIH0gZnJvbSAnLi9pcy11bmRlZmluZWQnO1xuaW1wb3J0IHsgSXNTdHJpbmdQaXBlIH0gZnJvbSAnLi9pcy1zdHJpbmcnO1xuaW1wb3J0IHsgSXNGdW5jdGlvblBpcGUgfSBmcm9tICcuL2lzLWZ1bmN0aW9uJztcbmltcG9ydCB7IElzTnVtYmVyUGlwZSB9IGZyb20gJy4vaXMtbnVtYmVyJztcbmltcG9ydCB7IElzQXJyYXlQaXBlIH0gZnJvbSAnLi9pcy1hcnJheSc7XG5pbXBvcnQgeyBJc09iamVjdFBpcGUgfSBmcm9tICcuL2lzLW9iamVjdCc7XG5pbXBvcnQgeyBJc0dyZWF0ZXJFcXVhbFRoYW5QaXBlIH0gZnJvbSAnLi9pcy1ncmVhdGVyLWVxdWFsLXRoYW4nO1xuaW1wb3J0IHsgSXNHcmVhdGVyVGhhblBpcGUgfSBmcm9tICcuL2lzLWdyZWF0ZXItdGhhbic7XG5pbXBvcnQgeyBJc0xlc3NFcXVhbFRoYW5QaXBlIH0gZnJvbSAnLi9pcy1sZXNzLWVxdWFsLXRoYW4nO1xuaW1wb3J0IHsgSXNFcXVhbFRvUGlwZSB9IGZyb20gJy4vaXMtZXF1YWwtdG8nO1xuaW1wb3J0IHsgSXNOb3RFcXVhbFRvUGlwZSB9IGZyb20gJy4vaXMtbm90LWVxdWFsLXRvJztcbmltcG9ydCB7IElzSWRlbnRpY2FsVG9QaXBlIH0gZnJvbSAnLi9pcy1pZGVudGljYWwtdG8nO1xuaW1wb3J0IHsgSXNOb3RJZGVudGljYWxUb1BpcGUgfSBmcm9tICcuL2lzLW5vdC1pZGVudGljYWwtdG8nO1xuaW1wb3J0IHsgSXNMZXNzVGhhblBpcGUgfSBmcm9tICcuL2lzLWxlc3MtdGhhbic7XG5cbmV4cG9ydCBjb25zdCBCT09MRUFOX1BJUEVTID0gW1xuICBJc0RlZmluZWRQaXBlLFxuICBJc051bGxQaXBlLFxuICBJc1VuZGVmaW5lZFBpcGUsXG4gIElzU3RyaW5nUGlwZSxcbiAgSXNGdW5jdGlvblBpcGUsXG4gIElzTnVtYmVyUGlwZSxcbiAgSXNBcnJheVBpcGUsXG4gIElzT2JqZWN0UGlwZSxcbiAgSXNHcmVhdGVyRXF1YWxUaGFuUGlwZSxcbiAgSXNHcmVhdGVyVGhhblBpcGUsXG4gIElzTGVzc0VxdWFsVGhhblBpcGUsXG4gIElzTGVzc0VxdWFsVGhhblBpcGUsXG4gIElzRXF1YWxUb1BpcGUsXG4gIElzTm90RXF1YWxUb1BpcGUsXG4gIElzSWRlbnRpY2FsVG9QaXBlLFxuICBJc05vdElkZW50aWNhbFRvUGlwZSxcbiAgSXNMZXNzVGhhblBpcGUsXG5dO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IEJPT0xFQU5fUElQRVMsXG4gIGltcG9ydHM6IFtdLFxuICBleHBvcnRzOiBCT09MRUFOX1BJUEVTLFxufSlcbmV4cG9ydCBjbGFzcyBOZ0Jvb2xlYW5QaXBlc01vZHVsZSB7fVxuXG5leHBvcnQgeyBJc0RlZmluZWRQaXBlIH0gZnJvbSAnLi9pcy1kZWZpbmVkJztcbmV4cG9ydCB7IElzTnVsbFBpcGUgfSBmcm9tICcuL2lzLW51bGwnO1xuZXhwb3J0IHsgSXNVbmRlZmluZWRQaXBlIH0gZnJvbSAnLi9pcy11bmRlZmluZWQnO1xuZXhwb3J0IHsgSXNTdHJpbmdQaXBlIH0gZnJvbSAnLi9pcy1zdHJpbmcnO1xuZXhwb3J0IHsgSXNGdW5jdGlvblBpcGUgfSBmcm9tICcuL2lzLWZ1bmN0aW9uJztcbmV4cG9ydCB7IElzTnVtYmVyUGlwZSB9IGZyb20gJy4vaXMtbnVtYmVyJztcbmV4cG9ydCB7IElzQXJyYXlQaXBlIH0gZnJvbSAnLi9pcy1hcnJheSc7XG5leHBvcnQgeyBJc09iamVjdFBpcGUgfSBmcm9tICcuL2lzLW9iamVjdCc7XG5leHBvcnQgeyBJc0dyZWF0ZXJFcXVhbFRoYW5QaXBlIH0gZnJvbSAnLi9pcy1ncmVhdGVyLWVxdWFsLXRoYW4nO1xuZXhwb3J0IHsgSXNHcmVhdGVyVGhhblBpcGUgfSBmcm9tICcuL2lzLWdyZWF0ZXItdGhhbic7XG5leHBvcnQgeyBJc0xlc3NFcXVhbFRoYW5QaXBlIH0gZnJvbSAnLi9pcy1sZXNzLWVxdWFsLXRoYW4nO1xuZXhwb3J0IHsgSXNFcXVhbFRvUGlwZSB9IGZyb20gJy4vaXMtZXF1YWwtdG8nO1xuZXhwb3J0IHsgSXNOb3RFcXVhbFRvUGlwZSB9IGZyb20gJy4vaXMtbm90LWVxdWFsLXRvJztcbmV4cG9ydCB7IElzSWRlbnRpY2FsVG9QaXBlIH0gZnJvbSAnLi9pcy1pZGVudGljYWwtdG8nO1xuZXhwb3J0IHsgSXNOb3RJZGVudGljYWxUb1BpcGUgfSBmcm9tICcuL2lzLW5vdC1pZGVudGljYWwtdG8nO1xuZXhwb3J0IHsgSXNMZXNzVGhhblBpcGUgfSBmcm9tICcuL2lzLWxlc3MtdGhhbic7XG4iXX0=
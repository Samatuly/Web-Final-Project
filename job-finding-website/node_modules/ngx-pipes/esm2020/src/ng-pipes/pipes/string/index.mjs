import { NgModule } from '@angular/core';
import { AorAnPipe } from './a-or-an';
import { UcWordsPipe } from './ucwords';
import { LeftTrimPipe } from './ltrim';
import { RepeatPipe } from './repeat';
import { RightTrimPipe } from './rtrim';
import { ScanPipe } from './scan';
import { ShortenPipe } from './shorten';
import { StripTagsPipe } from './strip-tags';
import { TrimPipe } from './trim';
import { UcFirstPipe } from './ucfirst';
import { SlugifyPipe } from './slugify';
import { CamelizePipe } from './camelize';
import { LatinisePipe } from './latinise';
import { LinesPipe } from './lines';
import { UnderscorePipe } from './underscore';
import { MatchPipe } from './match';
import { TestPipe } from './test';
import { LeftPadPipe } from './lpad';
import { RightPadPipe } from './rpad';
import { MakePluralStringPipe } from './pluralize';
import { WrapPipe } from './wrap';
import * as i0 from "@angular/core";
export const STRING_PIPES = [
    AorAnPipe,
    LeftTrimPipe,
    RepeatPipe,
    RightTrimPipe,
    ScanPipe,
    ShortenPipe,
    StripTagsPipe,
    TrimPipe,
    UcFirstPipe,
    UcWordsPipe,
    SlugifyPipe,
    CamelizePipe,
    LatinisePipe,
    LinesPipe,
    UnderscorePipe,
    MatchPipe,
    TestPipe,
    LeftPadPipe,
    RightPadPipe,
    MakePluralStringPipe,
    WrapPipe,
];
export class NgStringPipesModule {
}
NgStringPipesModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: NgStringPipesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgStringPipesModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.2.12", ngImport: i0, type: NgStringPipesModule, declarations: [AorAnPipe,
        LeftTrimPipe,
        RepeatPipe,
        RightTrimPipe,
        ScanPipe,
        ShortenPipe,
        StripTagsPipe,
        TrimPipe,
        UcFirstPipe,
        UcWordsPipe,
        SlugifyPipe,
        CamelizePipe,
        LatinisePipe,
        LinesPipe,
        UnderscorePipe,
        MatchPipe,
        TestPipe,
        LeftPadPipe,
        RightPadPipe,
        MakePluralStringPipe,
        WrapPipe], exports: [AorAnPipe,
        LeftTrimPipe,
        RepeatPipe,
        RightTrimPipe,
        ScanPipe,
        ShortenPipe,
        StripTagsPipe,
        TrimPipe,
        UcFirstPipe,
        UcWordsPipe,
        SlugifyPipe,
        CamelizePipe,
        LatinisePipe,
        LinesPipe,
        UnderscorePipe,
        MatchPipe,
        TestPipe,
        LeftPadPipe,
        RightPadPipe,
        MakePluralStringPipe,
        WrapPipe] });
NgStringPipesModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: NgStringPipesModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: NgStringPipesModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: STRING_PIPES,
                    imports: [],
                    exports: STRING_PIPES,
                }]
        }] });
export { AorAnPipe } from './a-or-an';
export { UcWordsPipe } from './ucwords';
export { LeftTrimPipe } from './ltrim';
export { RepeatPipe } from './repeat';
export { RightTrimPipe } from './rtrim';
export { ScanPipe } from './scan';
export { ShortenPipe } from './shorten';
export { StripTagsPipe } from './strip-tags';
export { TrimPipe } from './trim';
export { UcFirstPipe } from './ucfirst';
export { SlugifyPipe } from './slugify';
export { CamelizePipe } from './camelize';
export { LatinisePipe } from './latinise';
export { LinesPipe } from './lines';
export { UnderscorePipe } from './underscore';
export { MatchPipe } from './match';
export { TestPipe } from './test';
export { LeftPadPipe } from './lpad';
export { RightPadPipe } from './rpad';
export { MakePluralStringPipe } from './pluralize';
export { WrapPipe } from './wrap';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbmctcGlwZXMvcGlwZXMvc3RyaW5nL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN0QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDdkMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN0QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDbEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzdDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDbEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDMUMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLFlBQVksQ0FBQztBQUMxQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDOUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNwQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxXQUFXLEVBQUUs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TUFBTSxhQUFhLENBQUM7QUFDbkQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBb3JBblBpcGUgfSBmcm9tICcuL2Etb3ItYW4nO1xuaW1wb3J0IHsgVWNXb3Jkc1BpcGUgfSBmcm9tICcuL3Vjd29yZHMnO1xuaW1wb3J0IHsgTGVmdFRyaW1QaXBlIH0gZnJvbSAnLi9sdHJpbSc7XG5pbXBvcnQgeyBSZXBlYXRQaXBlIH0gZnJvbSAnLi9yZXBlYXQnO1xuaW1wb3J0IHsgUmlnaHRUcmltUGlwZSB9IGZyb20gJy4vcnRyaW0nO1xuaW1wb3J0IHsgU2NhblBpcGUgfSBmcm9tICcuL3NjYW4nO1xuaW1wb3J0IHsgU2hvcnRlblBpcGUgfSBmcm9tICcuL3Nob3J0ZW4nO1xuaW1wb3J0IHsgU3RyaXBUYWdzUGlwZSB9IGZyb20gJy4vc3RyaXAtdGFncyc7XG5pbXBvcnQgeyBUcmltUGlwZSB9IGZyb20gJy4vdHJpbSc7XG5pbXBvcnQgeyBVY0ZpcnN0UGlwZSB9IGZyb20gJy4vdWNmaXJzdCc7XG5pbXBvcnQgeyBTbHVnaWZ5UGlwZSB9IGZyb20gJy4vc2x1Z2lmeSc7XG5pbXBvcnQgeyBDYW1lbGl6ZVBpcGUgfSBmcm9tICcuL2NhbWVsaXplJztcbmltcG9ydCB7IExhdGluaXNlUGlwZSB9IGZyb20gJy4vbGF0aW5pc2UnO1xuaW1wb3J0IHsgTGluZXNQaXBlIH0gZnJvbSAnLi9saW5lcyc7XG5pbXBvcnQgeyBVbmRlcnNjb3JlUGlwZSB9IGZyb20gJy4vdW5kZXJzY29yZSc7XG5pbXBvcnQgeyBNYXRjaFBpcGUgfSBmcm9tICcuL21hdGNoJztcbmltcG9ydCB7IFRlc3RQaXBlIH0gZnJvbSAnLi90ZXN0JztcbmltcG9ydCB7IExlZnRQYWRQaXBlIH0gZnJvbSAnLi9scGFkJztcbmltcG9ydCB7IFJpZ2h0UGFkUGlwZSB9IGZyb20gJy4vcnBhZCc7XG5pbXBvcnQgeyBNYWtlUGx1cmFsU3RyaW5nUGlwZSB9IGZyb20gJy4vcGx1cmFsaXplJztcbmltcG9ydCB7IFdyYXBQaXBlIH0gZnJvbSAnLi93cmFwJztcblxuZXhwb3J0IGNvbnN0IFNUUklOR19QSVBFUyA9IFtcbiAgQW9yQW5QaXBlLFxuICBMZWZ0VHJpbVBpcGUsXG4gIFJlcGVhdFBpcGUsXG4gIFJpZ2h0VHJpbVBpcGUsXG4gIFNjYW5QaXBlLFxuICBTaG9ydGVuUGlwZSxcbiAgU3RyaXBUYWdzUGlwZSxcbiAgVHJpbVBpcGUsXG4gIFVjRmlyc3RQaXBlLFxuICBVY1dvcmRzUGlwZSxcbiAgU2x1Z2lmeVBpcGUsXG4gIENhbWVsaXplUGlwZSxcbiAgTGF0aW5pc2VQaXBlLFxuICBMaW5lc1BpcGUsXG4gIFVuZGVyc2NvcmVQaXBlLFxuICBNYXRjaFBpcGUsXG4gIFRlc3RQaXBlLFxuICBMZWZ0UGFkUGlwZSxcbiAgUmlnaHRQYWRQaXBlLFxuICBNYWtlUGx1cmFsU3RyaW5nUGlwZSxcbiAgV3JhcFBpcGUsXG5dO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFNUUklOR19QSVBFUyxcbiAgaW1wb3J0czogW10sXG4gIGV4cG9ydHM6IFNUUklOR19QSVBFUyxcbn0pXG5leHBvcnQgY2xhc3MgTmdTdHJpbmdQaXBlc01vZHVsZSB7fVxuXG5leHBvcnQgeyBBb3JBblBpcGUgfSBmcm9tICcuL2Etb3ItYW4nO1xuZXhwb3J0IHsgVWNXb3Jkc1BpcGUgfSBmcm9tICcuL3Vjd29yZHMnO1xuZXhwb3J0IHsgTGVmdFRyaW1QaXBlIH0gZnJvbSAnLi9sdHJpbSc7XG5leHBvcnQgeyBSZXBlYXRQaXBlIH0gZnJvbSAnLi9yZXBlYXQnO1xuZXhwb3J0IHsgUmlnaHRUcmltUGlwZSB9IGZyb20gJy4vcnRyaW0nO1xuZXhwb3J0IHsgU2NhblBpcGUgfSBmcm9tICcuL3NjYW4nO1xuZXhwb3J0IHsgU2hvcnRlblBpcGUgfSBmcm9tICcuL3Nob3J0ZW4nO1xuZXhwb3J0IHsgU3RyaXBUYWdzUGlwZSB9IGZyb20gJy4vc3RyaXAtdGFncyc7XG5leHBvcnQgeyBUcmltUGlwZSB9IGZyb20gJy4vdHJpbSc7XG5leHBvcnQgeyBVY0ZpcnN0UGlwZSB9IGZyb20gJy4vdWNmaXJzdCc7XG5leHBvcnQgeyBTbHVnaWZ5UGlwZSB9IGZyb20gJy4vc2x1Z2lmeSc7XG5leHBvcnQgeyBDYW1lbGl6ZVBpcGUgfSBmcm9tICcuL2NhbWVsaXplJztcbmV4cG9ydCB7IExhdGluaXNlUGlwZSB9IGZyb20gJy4vbGF0aW5pc2UnO1xuZXhwb3J0IHsgTGluZXNQaXBlIH0gZnJvbSAnLi9saW5lcyc7XG5leHBvcnQgeyBVbmRlcnNjb3JlUGlwZSB9IGZyb20gJy4vdW5kZXJzY29yZSc7XG5leHBvcnQgeyBNYXRjaFBpcGUgfSBmcm9tICcuL21hdGNoJztcbmV4cG9ydCB7IFRlc3RQaXBlIH0gZnJvbSAnLi90ZXN0JztcbmV4cG9ydCB7IExlZnRQYWRQaXBlIH0gZnJvbSAnLi9scGFkJztcbmV4cG9ydCB7IFJpZ2h0UGFkUGlwZSB9IGZyb20gJy4vcnBhZCc7XG5leHBvcnQgeyBNYWtlUGx1cmFsU3RyaW5nUGlwZSB9IGZyb20gJy4vcGx1cmFsaXplJztcbmV4cG9ydCB7IFdyYXBQaXBlIH0gZnJvbSAnLi93cmFwJztcbiJdfQ==
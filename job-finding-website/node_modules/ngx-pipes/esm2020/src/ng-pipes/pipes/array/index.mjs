import { DiffPipe } from './diff';
import { InitialPipe } from './initial';
import { FlattenPipe } from './flatten';
import { IntersectionPipe } from './intersection';
import { ReversePipe } from './reverse';
import { TailPipe } from './tail';
import { TrurthifyPipe } from './truthify';
import { UnionPipe } from './union';
import { UniquePipe } from './unique';
import { WithoutPipe } from './without';
import { PluckPipe } from './pluck';
import { ShufflePipe } from './shuffle';
import { EveryPipe } from './every';
import { SomePipe } from './some';
import { SamplePipe } from './sample';
import { GroupByPipe } from './group-by';
import { FilterByPipe } from './filter-by';
import { OrderByPipe } from './order-by';
import { NgModule } from '@angular/core';
import { GroupByImpurePipe } from './group-by-impure';
import { FilterByImpurePipe } from './filter-by-impure';
import { OrderByImpurePipe } from './order-by-impure';
import { RangePipe } from './range';
import { ChunkPipe } from './chunk';
import { FromPairsPipe } from './from-pairs';
import * as i0 from "@angular/core";
const ARRAY_PIPES = [
    DiffPipe,
    FlattenPipe,
    InitialPipe,
    IntersectionPipe,
    ReversePipe,
    TailPipe,
    TrurthifyPipe,
    UnionPipe,
    UniquePipe,
    WithoutPipe,
    PluckPipe,
    ShufflePipe,
    EveryPipe,
    SomePipe,
    SamplePipe,
    GroupByPipe,
    GroupByImpurePipe,
    FilterByPipe,
    FilterByImpurePipe,
    OrderByPipe,
    OrderByImpurePipe,
    RangePipe,
    ChunkPipe,
    FromPairsPipe
];
export class NgArrayPipesModule {
}
NgArrayPipesModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: NgArrayPipesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgArrayPipesModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.2.12", ngImport: i0, type: NgArrayPipesModule, declarations: [DiffPipe,
        FlattenPipe,
        InitialPipe,
        IntersectionPipe,
        ReversePipe,
        TailPipe,
        TrurthifyPipe,
        UnionPipe,
        UniquePipe,
        WithoutPipe,
        PluckPipe,
        ShufflePipe,
        EveryPipe,
        SomePipe,
        SamplePipe,
        GroupByPipe,
        GroupByImpurePipe,
        FilterByPipe,
        FilterByImpurePipe,
        OrderByPipe,
        OrderByImpurePipe,
        RangePipe,
        ChunkPipe,
        FromPairsPipe], exports: [DiffPipe,
        FlattenPipe,
        InitialPipe,
        IntersectionPipe,
        ReversePipe,
        TailPipe,
        TrurthifyPipe,
        UnionPipe,
        UniquePipe,
        WithoutPipe,
        PluckPipe,
        ShufflePipe,
        EveryPipe,
        SomePipe,
        SamplePipe,
        GroupByPipe,
        GroupByImpurePipe,
        FilterByPipe,
        FilterByImpurePipe,
        OrderByPipe,
        OrderByImpurePipe,
        RangePipe,
        ChunkPipe,
        FromPairsPipe] });
NgArrayPipesModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: NgArrayPipesModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: NgArrayPipesModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: ARRAY_PIPES,
                    imports: [],
                    exports: ARRAY_PIPES,
                }]
        }] });
export { DiffPipe } from './diff';
export { InitialPipe } from './initial';
export { FlattenPipe } from './flatten';
export { IntersectionPipe } from './intersection';
export { ReversePipe } from './reverse';
export { TailPipe } from './tail';
export { TrurthifyPipe } from './truthify';
export { UnionPipe } from './union';
export { UniquePipe } from './unique';
export { WithoutPipe } from './without';
export { PluckPipe } from './pluck';
export { ShufflePipe } from './shuffle';
export { EveryPipe } from './every';
export { SomePipe } from './some';
export { SamplePipe } from './sample';
export { GroupByPipe } from './group-by';
export { FilterByPipe } from './filter-by';
export { OrderByPipe } from './order-by';
export { GroupByImpurePipe } from './group-by-impure';
export { FilterByImpurePipe } from './filter-by-impure';
export { OrderByImpurePipe } from './order-by-impure';
export { RangePipe } from './range';
export { ChunkPipe } from './chunk';
export { FromPairsPipe } from './from-pairs';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbmctcGlwZXMvcGlwZXMvYXJyYXkvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNsQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNwQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNwQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDcEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNsQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMzQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxRQUFRLEVB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QUFNLFFBQVEsQ0FBQztBQUNsQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMzQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDcEMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNwQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sY0FBYyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlmZlBpcGUgfSBmcm9tICcuL2RpZmYnO1xuaW1wb3J0IHsgSW5pdGlhbFBpcGUgfSBmcm9tICcuL2luaXRpYWwnO1xuaW1wb3J0IHsgRmxhdHRlblBpcGUgfSBmcm9tICcuL2ZsYXR0ZW4nO1xuaW1wb3J0IHsgSW50ZXJzZWN0aW9uUGlwZSB9IGZyb20gJy4vaW50ZXJzZWN0aW9uJztcbmltcG9ydCB7IFJldmVyc2VQaXBlIH0gZnJvbSAnLi9yZXZlcnNlJztcbmltcG9ydCB7IFRhaWxQaXBlIH0gZnJvbSAnLi90YWlsJztcbmltcG9ydCB7IFRydXJ0aGlmeVBpcGUgfSBmcm9tICcuL3RydXRoaWZ5JztcbmltcG9ydCB7IFVuaW9uUGlwZSB9IGZyb20gJy4vdW5pb24nO1xuaW1wb3J0IHsgVW5pcXVlUGlwZSB9IGZyb20gJy4vdW5pcXVlJztcbmltcG9ydCB7IFdpdGhvdXRQaXBlIH0gZnJvbSAnLi93aXRob3V0JztcbmltcG9ydCB7IFBsdWNrUGlwZSB9IGZyb20gJy4vcGx1Y2snO1xuaW1wb3J0IHsgU2h1ZmZsZVBpcGUgfSBmcm9tICcuL3NodWZmbGUnO1xuaW1wb3J0IHsgRXZlcnlQaXBlIH0gZnJvbSAnLi9ldmVyeSc7XG5pbXBvcnQgeyBTb21lUGlwZSB9IGZyb20gJy4vc29tZSc7XG5pbXBvcnQgeyBTYW1wbGVQaXBlIH0gZnJvbSAnLi9zYW1wbGUnO1xuaW1wb3J0IHsgR3JvdXBCeVBpcGUgfSBmcm9tICcuL2dyb3VwLWJ5JztcbmltcG9ydCB7IEZpbHRlckJ5UGlwZSB9IGZyb20gJy4vZmlsdGVyLWJ5JztcbmltcG9ydCB7IE9yZGVyQnlQaXBlIH0gZnJvbSAnLi9vcmRlci1ieSc7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgR3JvdXBCeUltcHVyZVBpcGUgfSBmcm9tICcuL2dyb3VwLWJ5LWltcHVyZSc7XG5pbXBvcnQgeyBGaWx0ZXJCeUltcHVyZVBpcGUgfSBmcm9tICcuL2ZpbHRlci1ieS1pbXB1cmUnO1xuaW1wb3J0IHsgT3JkZXJCeUltcHVyZVBpcGUgfSBmcm9tICcuL29yZGVyLWJ5LWltcHVyZSc7XG5pbXBvcnQgeyBSYW5nZVBpcGUgfSBmcm9tICcuL3JhbmdlJztcbmltcG9ydCB7IENodW5rUGlwZSB9IGZyb20gJy4vY2h1bmsnO1xuaW1wb3J0IHsgRnJvbVBhaXJzUGlwZSB9IGZyb20gJy4vZnJvbS1wYWlycyc7XG5cbmNvbnN0IEFSUkFZX1BJUEVTID0gW1xuICBEaWZmUGlwZSxcbiAgRmxhdHRlblBpcGUsXG4gIEluaXRpYWxQaXBlLFxuICBJbnRlcnNlY3Rpb25QaXBlLFxuICBSZXZlcnNlUGlwZSxcbiAgVGFpbFBpcGUsXG4gIFRydXJ0aGlmeVBpcGUsXG4gIFVuaW9uUGlwZSxcbiAgVW5pcXVlUGlwZSxcbiAgV2l0aG91dFBpcGUsXG4gIFBsdWNrUGlwZSxcbiAgU2h1ZmZsZVBpcGUsXG4gIEV2ZXJ5UGlwZSxcbiAgU29tZVBpcGUsXG4gIFNhbXBsZVBpcGUsXG4gIEdyb3VwQnlQaXBlLFxuICBHcm91cEJ5SW1wdXJlUGlwZSxcbiAgRmlsdGVyQnlQaXBlLFxuICBGaWx0ZXJCeUltcHVyZVBpcGUsXG4gIE9yZGVyQnlQaXBlLFxuICBPcmRlckJ5SW1wdXJlUGlwZSxcbiAgUmFuZ2VQaXBlLFxuICBDaHVua1BpcGUsXG4gIEZyb21QYWlyc1BpcGVcbl07XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogQVJSQVlfUElQRVMsXG4gIGltcG9ydHM6IFtdLFxuICBleHBvcnRzOiBBUlJBWV9QSVBFUyxcbn0pXG5leHBvcnQgY2xhc3MgTmdBcnJheVBpcGVzTW9kdWxlIHt9XG5cbmV4cG9ydCB7IERpZmZQaXBlIH0gZnJvbSAnLi9kaWZmJztcbmV4cG9ydCB7IEluaXRpYWxQaXBlIH0gZnJvbSAnLi9pbml0aWFsJztcbmV4cG9ydCB7IEZsYXR0ZW5QaXBlIH0gZnJvbSAnLi9mbGF0dGVuJztcbmV4cG9ydCB7IEludGVyc2VjdGlvblBpcGUgfSBmcm9tICcuL2ludGVyc2VjdGlvbic7XG5leHBvcnQgeyBSZXZlcnNlUGlwZSB9IGZyb20gJy4vcmV2ZXJzZSc7XG5leHBvcnQgeyBUYWlsUGlwZSB9IGZyb20gJy4vdGFpbCc7XG5leHBvcnQgeyBUcnVydGhpZnlQaXBlIH0gZnJvbSAnLi90cnV0aGlmeSc7XG5leHBvcnQgeyBVbmlvblBpcGUgfSBmcm9tICcuL3VuaW9uJztcbmV4cG9ydCB7IFVuaXF1ZVBpcGUgfSBmcm9tICcuL3VuaXF1ZSc7XG5leHBvcnQgeyBXaXRob3V0UGlwZSB9IGZyb20gJy4vd2l0aG91dCc7XG5leHBvcnQgeyBQbHVja1BpcGUgfSBmcm9tICcuL3BsdWNrJztcbmV4cG9ydCB7IFNodWZmbGVQaXBlIH0gZnJvbSAnLi9zaHVmZmxlJztcbmV4cG9ydCB7IEV2ZXJ5UGlwZSB9IGZyb20gJy4vZXZlcnknO1xuZXhwb3J0IHsgU29tZVBpcGUgfSBmcm9tICcuL3NvbWUnO1xuZXhwb3J0IHsgU2FtcGxlUGlwZSB9IGZyb20gJy4vc2FtcGxlJztcbmV4cG9ydCB7IEdyb3VwQnlQaXBlIH0gZnJvbSAnLi9ncm91cC1ieSc7XG5leHBvcnQgeyBGaWx0ZXJCeVBpcGUgfSBmcm9tICcuL2ZpbHRlci1ieSc7XG5leHBvcnQgeyBPcmRlckJ5UGlwZSB9IGZyb20gJy4vb3JkZXItYnknO1xuZXhwb3J0IHsgR3JvdXBCeUltcHVyZVBpcGUgfSBmcm9tICcuL2dyb3VwLWJ5LWltcHVyZSc7XG5leHBvcnQgeyBGaWx0ZXJCeUltcHVyZVBpcGUgfSBmcm9tICcuL2ZpbHRlci1ieS1pbXB1cmUnO1xuZXhwb3J0IHsgT3JkZXJCeUltcHVyZVBpcGUgfSBmcm9tICcuL29yZGVyLWJ5LWltcHVyZSc7XG5leHBvcnQgeyBSYW5nZVBpcGUgfSBmcm9tICcuL3JhbmdlJztcbmV4cG9ydCB7IENodW5rUGlwZSB9IGZyb20gJy4vY2h1bmsnO1xuZXhwb3J0IHsgRnJvbVBhaXJzUGlwZSB9IGZyb20gJy4vZnJvbS1wYWlycyc7XG4iXX0=
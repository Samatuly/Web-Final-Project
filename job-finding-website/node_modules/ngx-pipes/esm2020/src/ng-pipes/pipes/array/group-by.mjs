import { Pipe } from '@angular/core';
import { extractDeepPropertyByMapKey, isFunction } from '../helpers/helpers';
import * as i0 from "@angular/core";
export class GroupByPipe {
    transform(input, discriminator = [], delimiter = '|') {
        if (!Array.isArray(input)) {
            return input;
        }
        return this.groupBy(input, discriminator, delimiter);
    }
    groupBy(list, discriminator, delimiter) {
        return list.reduce((acc, payload) => {
            const key = this.extractKeyByDiscriminator(discriminator, payload, delimiter);
            acc[key] = Array.isArray(acc[key]) ? acc[key].concat([payload]) : [payload];
            return acc;
        }, {});
    }
    extractKeyByDiscriminator(discriminator, payload, delimiter) {
        if (isFunction(discriminator)) {
            return discriminator(payload);
        }
        if (Array.isArray(discriminator)) {
            return discriminator.map(k => extractDeepPropertyByMapKey(payload, k)).join(delimiter);
        }
        return extractDeepPropertyByMapKey(payload, discriminator);
    }
}
GroupByPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: GroupByPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
GroupByPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "14.2.12", ngImport: i0, type: GroupByPipe, name: "groupBy" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: GroupByPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'groupBy' }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXAtYnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbmctcGlwZXMvcGlwZXMvYXJyYXkvZ3JvdXAtYnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLDJCQUEyQixFQUFFLFVBQVUsRUFBRSxNQUFNLG9CQUFvQixDQUFDOztBQUc3RSxNQUFNLE9BQU8sV0FBVztJQUN0QixTQUFTLENBQUMsS0FBVSxFQUFFLGdCQUFxQixFQUFFLEVBQUUsWUFBb0IsR0FBRztRQUNwRSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN6QixPQUFPLEtBQUssQ0FBQztTQUNkO1FBRUQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxhQUFhLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVPLE9BQU8sQ0FBQyxJQUFXLEVBQUUsYUFBa0IsRUFBRSxTQUFpQjtRQUNoRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFRLEVBQUUsT0FBZSxFQUFFLEVBQUU7WUFDL0MsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLHlCQUF5QixDQUFDLGFBQWEsRUFBRSxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFFOUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRTVFLE9BQU8sR0FBRyxDQUFDO1FBQ2IsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ1QsQ0FBQztJQUVPLHlCQUF5QixDQUFDLGFBQWtCLEVBQUUsT0FBZSxFQUFFLFNBQWlCO1FBQ3RGLElBQUksVUFBVSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1lBQzdCLE9BQWtCLGFBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUMzQztRQUVELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUNoQyxPQUFPLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQywyQkFBMkIsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDeEY7UUFFRCxPQUFPLDJCQUEyQixDQUFDLE9BQU8sRUFBVSxhQUFhLENBQUMsQ0FBQztJQUNyRSxDQUFDOzt5R0E3QlUsV0FBVzt1R0FBWCxXQUFXOzRGQUFYLFdBQVc7a0JBRHZCLElBQUk7bUJBQUMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZXh0cmFjdERlZXBQcm9wZXJ0eUJ5TWFwS2V5LCBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vaGVscGVycy9oZWxwZXJzJztcblxuQFBpcGUoeyBuYW1lOiAnZ3JvdXBCeScgfSlcbmV4cG9ydCBjbGFzcyBHcm91cEJ5UGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSwgZGlzY3JpbWluYXRvcjogYW55ID0gW10sIGRlbGltaXRlcjogc3RyaW5nID0gJ3wnKTogYW55IHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZ3JvdXBCeShpbnB1dCwgZGlzY3JpbWluYXRvciwgZGVsaW1pdGVyKTtcbiAgfVxuXG4gIHByaXZhdGUgZ3JvdXBCeShsaXN0OiBhbnlbXSwgZGlzY3JpbWluYXRvcjogYW55LCBkZWxpbWl0ZXI6IHN0cmluZykge1xuICAgIHJldHVybiBsaXN0LnJlZHVjZSgoYWNjOiBhbnksIHBheWxvYWQ6IHN0cmluZykgPT4ge1xuICAgICAgY29uc3Qga2V5ID0gdGhpcy5leHRyYWN0S2V5QnlEaXNjcmltaW5hdG9yKGRpc2NyaW1pbmF0b3IsIHBheWxvYWQsIGRlbGltaXRlcik7XG5cbiAgICAgIGFjY1trZXldID0gQXJyYXkuaXNBcnJheShhY2Nba2V5XSkgPyBhY2Nba2V5XS5jb25jYXQoW3BheWxvYWRdKSA6IFtwYXlsb2FkXTtcblxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG4gIH1cblxuICBwcml2YXRlIGV4dHJhY3RLZXlCeURpc2NyaW1pbmF0b3IoZGlzY3JpbWluYXRvcjogYW55LCBwYXlsb2FkOiBzdHJpbmcsIGRlbGltaXRlcjogc3RyaW5nKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24oZGlzY3JpbWluYXRvcikpIHtcbiAgICAgIHJldHVybiAoPEZ1bmN0aW9uPmRpc2NyaW1pbmF0b3IpKHBheWxvYWQpO1xuICAgIH1cblxuICAgIGlmIChBcnJheS5pc0FycmF5KGRpc2NyaW1pbmF0b3IpKSB7XG4gICAgICByZXR1cm4gZGlzY3JpbWluYXRvci5tYXAoayA9PiBleHRyYWN0RGVlcFByb3BlcnR5QnlNYXBLZXkocGF5bG9hZCwgaykpLmpvaW4oZGVsaW1pdGVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZXh0cmFjdERlZXBQcm9wZXJ0eUJ5TWFwS2V5KHBheWxvYWQsIDxzdHJpbmc+ZGlzY3JpbWluYXRvcik7XG4gIH1cbn1cbiJdfQ==
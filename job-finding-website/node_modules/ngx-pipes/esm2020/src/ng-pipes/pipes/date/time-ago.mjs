import { Pipe } from '@angular/core';
import * as i0 from "@angular/core";
export class TimeAgoPipe {
    /**
     * @param inputDate: Date | Moment - not included as TypeScript interface,
     * in order to keep `ngx-pipes` "pure" from dependencies!
     */
    transform(inputDate) {
        if (!inputDate || (!inputDate.getTime && !inputDate.toDate)) {
            return 'Invalid date';
        }
        const past = inputDate.toDate ? inputDate.toDate() : inputDate.getTime();
        const now = +new Date();
        if (past > now) {
            return 'in the future';
        }
        for (let i = 0, l = TimeAgoPipe.MAPPER.length, ms = now - past, div = TimeAgoPipe.YEAR_MS; i < l; ++i) {
            const elm = TimeAgoPipe.MAPPER[i];
            const unit = Math.floor(ms / (div /= elm.div));
            if (unit >= 1) {
                return unit === 1 ? elm.single : `${unit} ${elm.many} ago`;
            }
        }
        return 'just now';
    }
}
TimeAgoPipe.YEAR_MS = 1000 * 60 * 60 * 24 * 7 * 4 * 12;
TimeAgoPipe.MAPPER = [
    { single: 'last year', many: 'years', div: 1 },
    { single: 'last month', many: 'months', div: 12 },
    { single: 'last week', many: 'weeks', div: 4 },
    { single: 'yesterday', many: 'days', div: 7 },
    { single: 'an hour ago', many: 'hours', div: 24 },
    { single: 'just now', many: 'minutes', div: 60 },
];
TimeAgoPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: TimeAgoPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
TimeAgoPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "14.2.12", ngImport: i0, type: TimeAgoPipe, name: "timeAgo" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: TimeAgoPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'timeAgo' }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1hZ28uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbmctcGlwZXMvcGlwZXMvZGF0ZS90aW1lLWFnby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQzs7QUFHcEQsTUFBTSxPQUFPLFdBQVc7SUFXdEI7OztPQUdHO0lBQ0ksU0FBUyxDQUFDLFNBQWM7UUFDN0IsSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUMzRCxPQUFPLGNBQWMsQ0FBQztTQUN2QjtRQUVELE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3pFLE1BQU0sR0FBRyxHQUFHLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUV4QixJQUFJLElBQUksR0FBRyxHQUFHLEVBQUU7WUFDZCxPQUFPLGVBQWUsQ0FBQztTQUN4QjtRQUVELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLEdBQUcsR0FBRyxHQUFHLElBQUksRUFBRSxHQUFHLEdBQUcsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFO1lBQ3JHLE1BQU0sR0FBRyxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFFL0MsSUFBSSxJQUFJLElBQUksQ0FBQyxFQUFFO2dCQUNiLE9BQU8sSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLElBQUksR0FBRyxDQUFDLElBQUksTUFBTSxDQUFDO2FBQzVEO1NBQ0Y7UUFFRCxPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDOztBQXBDYyxtQkFBTyxHQUFXLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUcsQ0FBQTtBQUNuRCxrQkFBTSxHQUFRO0lBQzNCLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUU7SUFDOUMsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRTtJQUNqRCxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFO0lBQzlDLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUU7SUFDN0MsRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRTtJQUNqRCxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFO0NBQ2hELENBQUE7eUdBVFMsV0FBVzt1R0FBWCxXQUFXOzRGQUFYLFdBQVc7a0JBRHZCLElBQUk7bUJBQUMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AUGlwZSh7IG5hbWU6ICd0aW1lQWdvJyB9KVxuZXhwb3J0IGNsYXNzIFRpbWVBZ29QaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHByaXZhdGUgc3RhdGljIFlFQVJfTVM6IG51bWJlciA9IDEwMDAgKiA2MCAqIDYwICogMjQgKiA3ICogNCAqIDEyO1xuICBwcml2YXRlIHN0YXRpYyBNQVBQRVI6IGFueSA9IFtcbiAgICB7IHNpbmdsZTogJ2xhc3QgeWVhcicsIG1hbnk6ICd5ZWFycycsIGRpdjogMSB9LFxuICAgIHsgc2luZ2xlOiAnbGFzdCBtb250aCcsIG1hbnk6ICdtb250aHMnLCBkaXY6IDEyIH0sXG4gICAgeyBzaW5nbGU6ICdsYXN0IHdlZWsnLCBtYW55OiAnd2Vla3MnLCBkaXY6IDQgfSxcbiAgICB7IHNpbmdsZTogJ3llc3RlcmRheScsIG1hbnk6ICdkYXlzJywgZGl2OiA3IH0sXG4gICAgeyBzaW5nbGU6ICdhbiBob3VyIGFnbycsIG1hbnk6ICdob3VycycsIGRpdjogMjQgfSxcbiAgICB7IHNpbmdsZTogJ2p1c3Qgbm93JywgbWFueTogJ21pbnV0ZXMnLCBkaXY6IDYwIH0sXG4gIF07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSBpbnB1dERhdGU6IERhdGUgfCBNb21lbnQgLSBub3QgaW5jbHVkZWQgYXMgVHlwZVNjcmlwdCBpbnRlcmZhY2UsXG4gICAqIGluIG9yZGVyIHRvIGtlZXAgYG5neC1waXBlc2AgXCJwdXJlXCIgZnJvbSBkZXBlbmRlbmNpZXMhXG4gICAqL1xuICBwdWJsaWMgdHJhbnNmb3JtKGlucHV0RGF0ZTogYW55KTogc3RyaW5nIHtcbiAgICBpZiAoIWlucHV0RGF0ZSB8fCAoIWlucHV0RGF0ZS5nZXRUaW1lICYmICFpbnB1dERhdGUudG9EYXRlKSkge1xuICAgICAgcmV0dXJuICdJbnZhbGlkIGRhdGUnO1xuICAgIH1cblxuICAgIGNvbnN0IHBhc3QgPSBpbnB1dERhdGUudG9EYXRlID8gaW5wdXREYXRlLnRvRGF0ZSgpIDogaW5wdXREYXRlLmdldFRpbWUoKTtcbiAgICBjb25zdCBub3cgPSArbmV3IERhdGUoKTtcblxuICAgIGlmIChwYXN0ID4gbm93KSB7XG4gICAgICByZXR1cm4gJ2luIHRoZSBmdXR1cmUnO1xuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwLCBsID0gVGltZUFnb1BpcGUuTUFQUEVSLmxlbmd0aCwgbXMgPSBub3cgLSBwYXN0LCBkaXYgPSBUaW1lQWdvUGlwZS5ZRUFSX01TOyBpIDwgbDsgKytpKSB7XG4gICAgICBjb25zdCBlbG0gPSBUaW1lQWdvUGlwZS5NQVBQRVJbaV07XG4gICAgICBjb25zdCB1bml0ID0gTWF0aC5mbG9vcihtcyAvIChkaXYgLz0gZWxtLmRpdikpO1xuXG4gICAgICBpZiAodW5pdCA+PSAxKSB7XG4gICAgICAgIHJldHVybiB1bml0ID09PSAxID8gZWxtLnNpbmdsZSA6IGAke3VuaXR9ICR7ZWxtLm1hbnl9IGFnb2A7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuICdqdXN0IG5vdyc7XG4gIH1cbn1cbiJdfQ==